'use client';

import { useEffect, useMemo, useState } from 'react';
import { toYyyymm } from '../_utils/budgetActual'; // 既存のutilに合わせてください（無ければ下のyyyymmFromMonthで代用）
import { getCurrentProfileId } from '../_utils/getCurrentProfileId';

// ★ プロジェクトの Supabase クライアントの呼び出し方は app/log/page.tsx と同じにしてください！
// 例1: （あなたのプロジェクトの実装に合わせて）
import { useSupabase } from '@/supabaseClient';
// 例2: （もし上が無ければ）
// import { createClientComponentClient } from '@supabase/auth-helpers-nextjs';

type BudgetRow = { id: number; category: string; amount: number; yyyymm: string };

const CATEGORIES = ['食費', '交通', '日用品', '通信', '娯楽', '米', 'その他'];

// フォールバック: "2025-09" -> "202509"
function yyyymmFromMonth(month: string) {
  return month.replace('-', '');
}

export default function BudgetsPage() {
  // Supabase クライアントを log/page.tsx と同じ方法で用意
  const supabase = useSupabase?.() as any;
  // const supabase = createClientComponentClient(); // ←もし useSupabase が無い場合はこちらに切替

  // UI 状態
  const [month, setMonth] = useState<string>(() => {
    const d = new Date();
    return `${d.getFullYear()}-${String(d.getMonth() + 1).padStart(2, '0')}`;
  });
  const yyyymm = useMemo(() => {
    try {
      return toYyyymm ? toYyyymm(month) : yyyymmFromMonth(month);
    } catch {
      return yyyymmFromMonth(month);
    }
  }, [month]);

  const [rows, setRows] = useState<BudgetRow[]>([]);
  const [loading, setLoading] = useState(false);

  // フォーム
  const [category, setCategory] = useState(CATEGORIES[0]);
  const [amount, setAmount] = useState<number | ''>('');

  // 一覧取得
  useEffect(() => {
    (async () => {
      if (!supabase) return;
      const profileId = await getCurrentProfileId(supabase);
      if (!profileId) return;

      const { data, error } = await supabase
        .from('budgets')
        .select('id, category, amount, yyyymm')
        .eq('profile_id', profileId)
        .eq('yyyymm', yyyymm)
        .order('category', { ascending: true });

      if (!error && data) setRows(data as BudgetRow[]);
    })();
  }, [supabase, yyyymm]);

  // 追加
  async function handleAdd() {
    if (!supabase) return;
    if (amount === '' || Number.isNaN(Number(amount))) {
      alert('金額を入力してください');
      return;
    }
    setLoading(true);
    try {
      const profileId = await getCurrentProfileId(supabase);
      if (!profileId) throw new Error('profile_id が取得できませんでした');

      const payload = {
        profile_id: profileId,
        category,
        amount: Math.abs(Number(amount)), // 常に正の値で保存（実績は別テーブル）
        yyyymm,
      };

      const { error } = await supabase.from('budgets').insert(payload);
      if (error) throw error;

      // 再読込
      const { data, error: e2 } = await supabase
        .from('budgets')
        .select('id, category, amount, yyyymm')
        .eq('profile_id', profileId)
        .eq('yyyymm', yyyymm)
        .order('category', { ascending: true });
      if (e2) throw e2;
      setRows((data ?? []) as BudgetRow[]);
      setAmount('');
    } catch (e: any) {
      alert(`保存に失敗しました: ${e?.message ?? e}`);
    } finally {
      setLoading(false);
    }
  }

  return (
    <div className="p-6 space-y-6">
      <h1 className="text-2xl font-bold">予算</h1>

      {/* 月選択 */}
      <div className="flex items-center gap-3">
        <input
          type="month"
          value={month}
          onChange={(e) => setMonth(e.target.value)}
          className="border rounded px-3 py-2 bg-black/20 border-white/20"
        />
        <span className="text-sm opacity-70">対象: {yyyymm}</span>
      </div>

      {/* 追加フォーム */}
      <div className="flex items-end gap-3">
        <div className="flex flex-col">
          <label className="text-sm mb-1">カテゴリ</label>
          <select
            value={category}
            onChange={(e) => setCategory(e.target.value)}
            className="border rounded px-3 py-2 bg-black/20 border-white/20 min-w-[140px]"
          >
            {CATEGORIES.map((c) => (
              <option key={c} value={c}>{c}</option>
            ))}
          </select>
        </div>

        <div className="flex flex-col">
          <label className="text-sm mb-1">金額（円）</label>
          <input
            type="number"
            inputMode="numeric"
            value={amount}
            onChange={(e) => setAmount(e.target.value === '' ? '' : Number(e.target.value))}
            className="border rounded px-3 py-2 bg-black/20 border-white/20"
            placeholder="例) 15000"
          />
        </div>

        <button
          onClick={handleAdd}
          disabled={loading}
          className="px-4 py-2 rounded-lg bg-brand text-black border border-brand/40 hover:opacity-90 disabled:opacity-50"
        >
          追加
        </button>
      </div>

      {/* 一覧 */}
      <table className="w-full border-collapse">
        <thead>
          <tr>
            <th className="px-4 py-2 text-left">カテゴリ</th>
            <th className="px-4 py-2 text-right">予算</th>
            <th className="px-4 py-2 text-right">yyyyMM</th>
          </tr>
        </thead>
        <tbody>
          {rows.length === 0 ? (
            <tr>
              <td className="px-4 py-4" colSpan={3}>
                この月のデータがありません。まずは予算を追加してみてください。
              </td>
            </tr>
          ) : (
            rows.map((r) => (
              <tr key={r.id} className="border-t border-white/10">
                <td className="px-4 py-2">{r.category}</td>
                <td className="px-4 py-2 text-right">{r.amount.toLocaleString()}円</td>
                <td className="px-4 py-2 text-right">{r.yyyymm}</td>
              </tr>
            ))
          )}
        </tbody>
      </table>
    </div>
  );
}

