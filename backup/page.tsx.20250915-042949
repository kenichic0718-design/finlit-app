'use client';
import { useEffect, useMemo, useState } from 'react';
import { supabase } from '@/lib/supabase';
import { Bar } from 'react-chartjs-2';
import { Chart, BarElement, CategoryScale, LinearScale, Tooltip, Legend } from 'chart.js';
Chart.register(BarElement, CategoryScale, LinearScale, Tooltip, Legend);

type Expense = { id:number; date:string; amount:number; category:string; memo?:string|null; is_income:boolean };

const ymNow = ()=> {
  const d = new Date();
  return `${d.getFullYear()}-${String(d.getMonth()+1).padStart(2,'0')}`;
};
const todayStr = ()=> new Date().toISOString().slice(0,10);
const fmt = (n:number)=>`${n.toLocaleString()}円`;
const CATS = ['食費','交通','通信','住居','学業','医療','趣味','交際','その他'];

export default function LogPage() {
  const [date, setDate] = useState(todayStr());
  const [category, setCategory] = useState(CATS[0]);
  const [amount, setAmount] = useState<number>(0);
  const [memo, setMemo] = useState('');
  const [isIncome, setIsIncome] = useState(false);
  const [list, setList] = useState<Expense[]>([]);
  const [editing, setEditing] = useState<Expense|null>(null);

  const month = ymNow();

  const ensureVisitor = () => {
    if (!localStorage.getItem('visitor_id')) localStorage.setItem('visitor_id', crypto.randomUUID());
    return localStorage.getItem('visitor_id')!;
  };
  const getProfileId = async () => {
    const visitor_id = ensureVisitor();
    const { data: p } = await supabase.from('profiles').select('id').eq('visitor_id', visitor_id).single();
    if (p?.id) return p.id;
    const ins = await supabase.from('profiles').insert({ visitor_id }).select('id').single();
    return ins.data?.id;
  };

  const load = async () => {
    const { data } = await supabase.from('expenses')
      .select('id,date,amount,category,memo,is_income')
      .gte('date', `${month}-01`).lte('date', `${month}-31`)
      .order('date', { ascending: true }).order('id', { ascending: true });
    setList(data ?? []);
  };
  useEffect(()=>{ load(); },[]);

  const monthlySum = useMemo(()=>{
    const m = new Map<string, number>();
    for (const x of list) if (!x.is_income) m.set('支出',(m.get('支出')||0)+x.amount);
    return { labels:['支出'], data:[m.get('支出')||0] };
  },[list]);

  const clearForm = ()=>{
    setDate(todayStr()); setCategory(CATS[0]); setAmount(0); setMemo(''); setIsIncome(false); setEditing(null);
  };

  const save = async () => {
    const profile_id = await getProfileId();
    if (editing) {
      await supabase.from('expenses').update({
        date, category, amount, memo, is_income: isIncome, profile_id,
      }).eq('id', editing.id);
    } else {
      await supabase.from('expenses').insert([{ profile_id, date, category, amount, memo, is_income: isIncome }]);
    }
    await load();
    clearForm();
  };

  const del = async (id:number) => {
    await supabase.from('expenses').delete().eq('id', id);
    setList(prev=>prev.filter(x=>x.id!==id));
    if (editing?.id===id) clearForm();
  };

  const startEdit = (e:Expense)=>{
    setEditing(e);
    setDate(e.date);
    setCategory(e.category);
    setAmount(e.amount);
    setMemo(e.memo ?? '');
    setIsIncome(e.is_income);
    window.scrollTo({ top: 0, behavior: 'smooth' });
  };

  return (
    <div className="space-y-6">
      <h2 className="text-lg font-semibold">記録</h2>

      {/* 入力フォーム */}
      <div className="flex flex-wrap items-center gap-2">
        <input type="date" className="border rounded px-2 py-1" value={date} onChange={e=>setDate(e.target.value)} />
        <select className="border rounded px-2 py-1" value={category} onChange={e=>setCategory(e.target.value)}>
          {CATS.map(c=><option key={c}>{c}</option>)}
        </select>
        <input type="number" className="border rounded px-2 py-1 w-28" placeholder="金額" value={amount} onChange={e=>setAmount(Number(e.target.value)||0)} />
        <input type="text" className="border rounded px-2 py-1 grow" placeholder="メモ（任意）" value={memo} onChange={e=>setMemo(e.target.value)} />
        <label className="text-sm flex items-center gap-1">
          <input type="checkbox" checked={isIncome} onChange={e=>setIsIncome(e.target.checked)} />
          収入として記録
        </label>
        <button onClick={save} className="border rounded px-3 py-1">{editing?'更新':'追加'}</button>
        {editing && <button onClick={clearForm} className="border rounded px-3 py-1">キャンセル</button>}
      </div>

      {/* 月次サマリ（簡易Bar） */}
      <div className="max-w-xl">
        <Bar data={{ labels: monthlySum.labels, datasets:[{ label:'月次支出', data: monthlySum.data }] }} />
      </div>

      {/* 一覧 */}
      <ul className="space-y-2">
        {list.map(e=>(
          <li key={e.id} className="border rounded p-2 flex items-center justify-between">
            <div className="text-sm">
              <div className="font-medium">{e.date} / {e.category} / {fmt(e.amount)}{e.is_income ? '（収入）':''}</div>
              {e.memo && <div className="text-gray-500">{e.memo}</div>}
            </div>
            <div className="flex gap-2">
              <button onClick={()=>startEdit(e)} className="border rounded px-2 py-1 text-sm">編集</button>
              <button onClick={()=>del(e.id)} className="border rounded px-2 py-1 text-sm text-red-600">削除</button>
            </div>
          </li>
        ))}
      </ul>
    </div>
  );
}

