diff --git a/app/_lib/getProfileId.ts b/app/_lib/getProfileId.ts
new file mode 100644
index 0000000..5494182
--- /dev/null
+++ b/app/_lib/getProfileId.ts
@@ -0,0 +1,45 @@
+'use server';
+
+import { createClient } from '@/app/_supabase/server';
+
+/**
+ * 現在ログイン中ユーザーの profile_id を返す。
+ * なければ作成してから返す。
+ *
+ * 返り値:
+ *   - string: profile_id
+ *   - null  : 未ログイン
+ */
+export async function getProfileId(): Promise<string | null> {
+  const supabase = await createClient();
+
+  // 1) ログイン確認
+  const { data: { user } } = await supabase.auth.getUser();
+  if (!user) return null;
+
+  // 2) 既存の profiles を探す
+  const { data: existing, error: selErr } = await supabase
+    .from('profiles')
+    .select('id')
+    .eq('user_id', user.id)
+    .maybeSingle();
+
+  if (selErr) {
+    console.error(selErr);
+  }
+  if (existing?.id) return existing.id;
+
+  // 3) なければ作成（RLSで許可が必要）
+  const { data: inserted, error: insErr } = await supabase
+    .from('profiles')
+    .insert({ user_id: user.id })          // 必要に応じて初期値を追加
+    .select('id')
+    .single();
+
+  if (insErr) {
+    console.error(insErr);
+    throw insErr; // ここで失敗する場合は RLS の許可が不足
+  }
+  return inserted.id;
+}
+
diff --git a/app/_supabase.ts b/app/_supabase.ts
new file mode 100644
index 0000000..705212c
--- /dev/null
+++ b/app/_supabase.ts
@@ -0,0 +1,6 @@
+import { createClient } from '@supabase/supabase-js';
+
+const url  = process.env.NEXT_PUBLIC_SUPABASE_URL!;
+const anon = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!;
+
+export const supabase = createClient(url, anon);
diff --git a/app/_supabase/client.ts b/app/_supabase/client.ts
new file mode 100644
index 0000000..2172884
--- /dev/null
+++ b/app/_supabase/client.ts
@@ -0,0 +1,19 @@
+// app/_supabase/client.ts
+'use client';
+
+import { createClient, SupabaseClient } from '@supabase/supabase-js';
+
+let _client: SupabaseClient | null = null;
+
+/** CSR(ブラウザ)から使う読み取り主体のクライアント */
+export function getSupabaseBrowser(): SupabaseClient {
+  if (_client) return _client;
+
+  const url = process.env.NEXT_PUBLIC_SUPABASE_URL!;
+  const anon = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!;
+  _client = createClient(url, anon, {
+    auth: { persistSession: true },
+  });
+  return _client;
+}
+
diff --git a/app/_supabase/route.ts b/app/_supabase/route.ts
new file mode 100644
index 0000000..5e4471e
--- /dev/null
+++ b/app/_supabase/route.ts
@@ -0,0 +1,12 @@
+import { cookies } from "next/headers";
+import { createRouteHandlerClient } from "@supabase/auth-helpers-nextjs";
+import type { SupabaseClient } from "@supabase/supabase-js";
+
+/**
+ * Route HandlerやServer Actionから使うSupabaseクライアント。
+ * ここでは cookie の set/remove が許可されています（Nextの制約OKな領域）
+ */
+export function getSupabaseRoute(): SupabaseClient {
+  return createRouteHandlerClient({ cookies });
+}
+
diff --git a/app/_supabase/server.ts b/app/_supabase/server.ts
new file mode 100644
index 0000000..dd6812c
--- /dev/null
+++ b/app/_supabase/server.ts
@@ -0,0 +1,27 @@
+// app/_supabase/server.ts
+import { createClient } from "@supabase/supabase-js";
+
+const URL = process.env.NEXT_PUBLIC_SUPABASE_URL!;
+const ANON = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!;
+const SERVICE = process.env.SUPABASE_SERVICE_ROLE_KEY!;
+
+// APIが「準備OKか」を使う場所があるので共通化
+export function envReady() {
+  return Boolean(URL && ANON && SERVICE);
+}
+
+export function getSupabaseServer() {
+  if (!envReady()) throw new Error("Supabase env not ready");
+  return createClient(URL, ANON, {
+    auth: { persistSession: false },
+  });
+}
+
+export function getSupabaseAdmin() {
+  if (!envReady()) throw new Error("Supabase env not ready");
+  // サーバー側（RLSを跨ぐ必要がある作成/更新/削除用）
+  return createClient(URL, SERVICE, {
+    auth: { persistSession: false },
+  });
+}
+
diff --git a/app/_utils/categories.ts b/app/_utils/categories.ts
new file mode 100644
index 0000000..58a3b31
--- /dev/null
+++ b/app/_utils/categories.ts
@@ -0,0 +1,49 @@
+// app/_utils/categories.ts
+import 'server-only';
+import { createClient } from "@/app/_supabase/server";
+
+export type Kind = "expense" | "income";
+
+export async function fetchCategoriesForPick(profileId: string, kind: Kind) {
+  const supabase = createClient();
+  const { data, error } = await supabase
+    .from("categories")
+    .select("id,name,kind")
+    .eq("kind", kind)
+    .order("name", { ascending: true });
+
+  if (error) throw error;
+  return data!.filter(c => c.name && c.name.trim().length > 0);
+}
+
+/** name が無ければ追加して id を返す。既存があればその id。 */
+export async function ensureCategory(profileId: string, kind: Kind, name: string) {
+  const supabase = createClient();
+
+  const trimmed = name.trim();
+  if (!trimmed) throw new Error("カテゴリ名を入力してください。");
+
+  // 既存検索
+  const { data: existed, error: selErr } = await supabase
+    .from("categories")
+    .select("id")
+    .eq("kind", kind)
+    .ilike("name", trimmed)
+    .limit(1);
+  if (selErr) throw selErr;
+
+  if (existed && existed.length > 0) {
+    return existed[0].id as string;
+  }
+
+  // 新規作成
+  const { data: inserted, error: insErr } = await supabase
+    .from("categories")
+    .insert({ name: trimmed, kind })
+    .select("id")
+    .limit(1);
+  if (insErr) throw insErr;
+
+  return inserted![0].id as string;
+}
+
diff --git a/app/_utils/profile.ts b/app/_utils/profile.ts
new file mode 100644
index 0000000..3ac159f
--- /dev/null
+++ b/app/_utils/profile.ts
@@ -0,0 +1,31 @@
+// app/_utils/profile.ts
+import { headers } from "next/headers";
+
+// 現在のYYYYMMを返す（"202509" など）
+export function currentYYYYMM(date = new Date()): string {
+  const y = date.getFullYear();
+  const m = `${date.getMonth() + 1}`.padStart(2, "0");
+  return `${y}${m}`;
+}
+
+// Server Component / Route 専用：プロフィールID(= vid)をAPI経由で取得
+export async function getProfileId(): Promise<string> {
+  const h = await headers(); // ← await が必要
+  const proto = h.get("x-forwarded-proto") ?? "http";
+  const host = h.get("x-forwarded-host") ?? h.get("host") ?? "localhost:3000";
+  const base = `${proto}://${host}`;
+
+  const res = await fetch(`${base}/api/profile`, {
+    cache: "no-store",
+    headers: { cookie: h.get("cookie") ?? "" }, // SSRで Cookie を引き継ぐ
+  });
+
+  if (!res.ok) {
+    throw new Error(`getProfileId failed: ${res.status} ${await res.text()}`);
+  }
+
+  const { vid } = (await res.json()) as { vid: string };
+  if (!vid) throw new Error("No vid from /api/profile");
+  return vid;
+}
+
diff --git a/app/api/budgets/add/route.ts b/app/api/budgets/add/route.ts
new file mode 100644
index 0000000..3bfde52
--- /dev/null
+++ b/app/api/budgets/add/route.ts
@@ -0,0 +1,58 @@
+// app/api/budgets/add/route.ts
+import { NextResponse } from "next/server";
+import { createClient } from "@/app/_supabase/server";
+
+export async function POST(req: Request) {
+  const supabase = createClient();
+  const form = await req.formData();
+
+  const profile_id = String(form.get("profile_id") || "");
+  const category_id = String(form.get("category_id") || "");
+  const new_category_name = String(form.get("new_category_name") || "").trim();
+  const amount = Number(form.get("amount") || 0);
+  const yyyymm = String(form.get("yyyymm") || "").trim();
+  const kind = "expense"; // ここは要件に合わせて
+
+  if (!profile_id) return NextResponse.json({ ok: false, error: "profile_id missing" }, { status: 400 });
+  if (!yyyymm)   return NextResponse.json({ ok: false, error: "yyyymm missing" }, { status: 400 });
+
+  let finalCategoryId = category_id;
+
+  if (category_id === "__OTHER__") {
+    if (!new_category_name) {
+      return NextResponse.json({ ok: false, error: "新しいカテゴリ名を入力してください" }, { status: 400 });
+    }
+    // 既存チェック
+    const { data: exist } = await supabase
+      .from("categories")
+      .select("id")
+      .eq("name", new_category_name)
+      .eq("kind", kind)
+      .maybeSingle();
+
+    if (exist?.id) {
+      finalCategoryId = exist.id;
+    } else {
+      const { data: inserted, error: catErr } = await supabase
+        .from("categories")
+        .insert({ name: new_category_name, kind })
+        .select("id")
+        .single();
+      if (catErr) return NextResponse.json({ ok: false, error: catErr.message }, { status: 400 });
+      finalCategoryId = inserted.id;
+    }
+  }
+
+  const { error } = await supabase.from("budgets").insert({
+    profile_id,
+    category_id: finalCategoryId,
+    amount,
+    yyyymm
+  });
+
+  if (error) return NextResponse.json({ ok: false, error: error.message }, { status: 400 });
+
+  // 戻る
+  return NextResponse.redirect(new URL("/budgets", req.url));
+}
+
diff --git a/app/api/categories/[id].ts b/app/api/categories/[id].ts
new file mode 100644
index 0000000..cc788ef
--- /dev/null
+++ b/app/api/categories/[id].ts
@@ -0,0 +1,54 @@
+// app/api/categories/[id]/route.ts
+import { NextResponse } from "next/server";
+import { getSupabaseAdmin, envReady } from "@/app/_supabase/server";
+
+export const dynamic = "force-dynamic";
+
+// PATCH /api/categories/:id   { name?, order_index? }
+export async function PATCH(
+  _req: Request,
+  ctx: { params: { id: string } }
+) {
+  try {
+    if (!envReady()) return NextResponse.json({ ok: false, error: "Not ready" }, { status: 500 });
+
+    const id = ctx.params.id;
+    const body = await _req.json().catch(() => ({}));
+    const updates: any = {};
+
+    if (typeof body.name === "string") updates.name = body.name.trim();
+    if (typeof body.order_index === "number") updates.order_index = body.order_index;
+
+    if (!Object.keys(updates).length) {
+      return NextResponse.json({ ok: false, error: "no updates" }, { status: 400 });
+    }
+
+    const supa = getSupabaseAdmin();
+    const { data, error } = await supa.from("categories").update(updates).eq("id", id).select("*").single();
+    if (error) throw error;
+
+    return NextResponse.json({ ok: true, item: data });
+  } catch (e: any) {
+    return NextResponse.json({ ok: false, error: e.message ?? "Server error" }, { status: 500 });
+  }
+}
+
+// DELETE /api/categories/:id
+export async function DELETE(
+  _req: Request,
+  ctx: { params: { id: string } }
+) {
+  try {
+    if (!envReady()) return NextResponse.json({ ok: false, error: "Not ready" }, { status: 500 });
+
+    const id = ctx.params.id;
+    const supa = getSupabaseAdmin();
+    const { error } = await supa.from("categories").delete().eq("id", id);
+    if (error) throw error;
+
+    return NextResponse.json({ ok: true });
+  } catch (e: any) {
+    return NextResponse.json({ ok: false, error: e.message ?? "Server error" }, { status: 500 });
+  }
+}
+
diff --git a/app/api/categories/[id]/route.ts b/app/api/categories/[id]/route.ts
new file mode 100644
index 0000000..9e4fd46
--- /dev/null
+++ b/app/api/categories/[id]/route.ts
@@ -0,0 +1,43 @@
+// app/api/categories/[id]/route.ts
+import { NextResponse } from "next/server";
+import { getSupabaseServer } from "@/app/_supabase/server";
+
+export async function PATCH(_req: Request, { params }: { params:{ id:string } }) {
+  try {
+    const { supabase, user } = await getSupabaseServer();
+    if (!user) return NextResponse.json({ ok:false, error:"Unauthorized" }, { status:401 });
+
+    const body = await _req.json() as Partial<{ name:string; color:string }>;
+    const { data, error } = await supabase
+      .from("categories")
+      .update(body)
+      .eq("id", params.id)
+      .eq("profile_id", user.id) // 自分のだけ編集可
+      .select()
+      .single();
+    if (error) throw error;
+
+    return NextResponse.json({ ok:true, item:data });
+  } catch (e:any) {
+    return NextResponse.json({ ok:false, error:String(e.message ?? e) }, { status:500 });
+  }
+}
+
+export async function DELETE(_req: Request, { params }: { params:{ id:string } }) {
+  try {
+    const { supabase, user } = await getSupabaseServer();
+    if (!user) return NextResponse.json({ ok:false, error:"Unauthorized" }, { status:401 });
+
+    const { error } = await supabase
+      .from("categories")
+      .delete()
+      .eq("id", params.id)
+      .eq("profile_id", user.id);
+    if (error) throw error;
+
+    return NextResponse.json({ ok:true });
+  } catch (e:any) {
+    return NextResponse.json({ ok:false, error:String(e.message ?? e) }, { status:500 });
+  }
+}
+
diff --git a/app/api/categories/add/route.ts b/app/api/categories/add/route.ts
new file mode 100644
index 0000000..0801e35
--- /dev/null
+++ b/app/api/categories/add/route.ts
@@ -0,0 +1,53 @@
+// app/api/categories/add/route.ts
+import { NextResponse } from "next/server";
+import { createClient } from "@/app/_supabase/server";
+import { revalidatePath } from "next/cache";
+
+export async function POST(req: Request) {
+  try {
+    const { profileId, kind, name } = (await req.json()) as {
+      profileId: string;
+      kind: "expense" | "income";
+      name: string;
+    };
+
+    if (!profileId || !kind || !name?.trim()) {
+      return NextResponse.json(
+        { message: "必須項目が不足しています" },
+        { status: 400 }
+      );
+    }
+
+    const supabase = createClient();
+
+    const { data, error } = await supabase
+      .from("categories")
+      .insert({
+        profile_id: profileId,
+        kind,
+        name: name.trim(),
+      })
+      .select("id,name,kind")
+      .single();
+
+    if (error) {
+      // 一意制約違反など
+      return NextResponse.json(
+        { message: error.message },
+        { status: 409 }
+      );
+    }
+
+    // /log, /budgets のプルダウンにも反映
+    revalidatePath("/log");
+    revalidatePath("/budgets");
+
+    return NextResponse.json({ data }, { status: 201 });
+  } catch (e: any) {
+    return NextResponse.json(
+      { message: e?.message ?? "サーバーエラー" },
+      { status: 500 }
+    );
+  }
+}
+
diff --git a/app/api/categories/delete/route.ts b/app/api/categories/delete/route.ts
new file mode 100644
index 0000000..29a1f4b
--- /dev/null
+++ b/app/api/categories/delete/route.ts
@@ -0,0 +1,34 @@
+// app/api/categories/delete/route.ts
+import { NextResponse } from "next/server";
+import { createClient } from "@/app/_supabase/server";
+import { revalidatePath } from "next/cache";
+
+export async function POST(req: Request) {
+  try {
+    const { id } = (await req.json()) as { id: string };
+    if (!id) {
+      return NextResponse.json({ message: "id が必要です" }, { status: 400 });
+    }
+
+    const supabase = createClient();
+
+    const { error } = await supabase.from("categories").delete().eq("id", id);
+    if (error) {
+      return NextResponse.json(
+        { message: error.message },
+        { status: 400 }
+      );
+    }
+
+    revalidatePath("/log");
+    revalidatePath("/budgets");
+
+    return NextResponse.json({ ok: true });
+  } catch (e: any) {
+    return NextResponse.json(
+      { message: e?.message ?? "サーバーエラー" },
+      { status: 500 }
+    );
+  }
+}
+
diff --git a/app/api/categories/reorder/route.ts b/app/api/categories/reorder/route.ts
new file mode 100644
index 0000000..b659613
--- /dev/null
+++ b/app/api/categories/reorder/route.ts
@@ -0,0 +1,33 @@
+// app/api/categories/reorder/route.ts
+import { NextResponse } from "next/server";
+import { getSupabaseServer } from "@/app/_supabase/server";
+
+/** body: { kind: 'expense'|'income', ids: string[] } */
+export async function POST(req: Request) {
+  try {
+    const { supabase, user } = await getSupabaseServer();
+    if (!user) return NextResponse.json({ ok:false, error:"Unauthorized" }, { status:401 });
+
+    const { ids, kind } = await req.json() as { ids:string[]; kind:"expense"|"income" };
+    if (!Array.isArray(ids) || !kind) return NextResponse.json({ ok:false, error:"invalid body" }, { status:400 });
+
+    // 自分のカテゴリのみ対象（共通カテゴリは除外）
+    const step = 10;
+    for (let i = 0; i < ids.length; i++) {
+      const id = ids[i];
+      const order = (i + 1) * step;
+      const { error } = await supabase
+        .from("categories")
+        .update({ sort_order: order })
+        .eq("id", id)
+        .eq("profile_id", user.id)
+        .eq("kind", kind);
+      if (error) throw error;
+    }
+
+    return NextResponse.json({ ok:true });
+  } catch (e:any) {
+    return NextResponse.json({ ok:false, error:String(e.message ?? e) }, { status:500 });
+  }
+}
+
diff --git a/app/api/categories/route.ts b/app/api/categories/route.ts
new file mode 100644
index 0000000..ad1ca2d
--- /dev/null
+++ b/app/api/categories/route.ts
@@ -0,0 +1,57 @@
+// app/api/categories/route.ts
+import { NextResponse } from "next/server";
+import { getSupabaseAdmin, envReady } from "@/app/_supabase/server";
+
+export const dynamic = "force-dynamic";
+
+// GET /api/categories?kind=expense|income|all
+export async function GET(req: Request) {
+  try {
+    if (!envReady()) return NextResponse.json({ ok: false, error: "Not ready" }, { status: 500 });
+
+    const { searchParams } = new URL(req.url);
+    const kind = searchParams.get("kind") ?? "all";
+
+    const supa = getSupabaseAdmin();
+    let query = supa.from("v_categories_for_pick").select("*").order("name", { ascending: true });
+
+    if (kind === "expense" || kind === "income") {
+      query = query.eq("kind", kind);
+    }
+
+    const { data, error } = await query;
+    if (error) throw error;
+
+    return NextResponse.json({ ok: true, items: data ?? [] });
+  } catch (e: any) {
+    return NextResponse.json({ ok: false, error: e.message ?? "Server error" }, { status: 500 });
+  }
+}
+
+// POST /api/categories  { name, kind }
+export async function POST(req: Request) {
+  try {
+    if (!envReady()) return NextResponse.json({ ok: false, error: "Not ready" }, { status: 500 });
+
+    const body = await req.json().catch(() => ({}));
+    const name = (body?.name ?? "").trim();
+    const kind = body?.kind === "income" ? "income" : "expense";
+
+    if (!name) return NextResponse.json({ ok: false, error: "name is required" }, { status: 400 });
+
+    const supa = getSupabaseAdmin();
+
+    const { data, error } = await supa
+      .from("categories")
+      .insert({ name, kind })
+      .select("*")
+      .single();
+
+    if (error) throw error;
+
+    return NextResponse.json({ ok: true, item: data });
+  } catch (e: any) {
+    return NextResponse.json({ ok: false, error: e.message ?? "Server error" }, { status: 500 });
+  }
+}
+
diff --git a/app/api/health/route.ts b/app/api/health/route.ts
new file mode 100644
index 0000000..941f471
--- /dev/null
+++ b/app/api/health/route.ts
@@ -0,0 +1,12 @@
+// app/api/health/route.ts
+import { NextResponse } from "next/server";
+
+export async function GET() {
+  const urlSet = !!process.env.NEXT_PUBLIC_SUPABASE_URL;
+  const anonSet = !!process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;
+  const hasServiceKey = !!process.env.SUPABASE_SERVICE_ROLE_KEY;
+
+  const ok = urlSet && anonSet && hasServiceKey;
+  return NextResponse.json({ ok, hasServiceKey, urlSet, anonSet });
+}
+
diff --git a/app/api/logs/add/route.ts b/app/api/logs/add/route.ts
new file mode 100644
index 0000000..b385317
--- /dev/null
+++ b/app/api/logs/add/route.ts
@@ -0,0 +1,36 @@
+// app/api/logs/add/route.ts
+import { NextResponse } from "next/server";
+import { cookies } from "next/headers";
+import { createRouteHandlerClient } from "@supabase/auth-helpers-nextjs";
+
+export async function POST(req: Request) {
+  const supabase = createRouteHandlerClient({ cookies });
+
+  try {
+    const body = await req.json();
+    const { profile_id, kind, category, amount } = body;
+
+    const { data, error } = await supabase
+      .from("logs")
+      .insert([
+        {
+          profile_id, // CSV にあるので必須
+          kind,       // "支出" or "収入"
+          category,   // 文字列（例: "食費"）
+          amount,     // 数値
+        },
+      ])
+      .select();
+
+    if (error) {
+      console.error("Supabase insert error:", error);
+      return NextResponse.json({ error: error.message }, { status: 500 });
+    }
+
+    return NextResponse.json({ success: true, data }, { status: 200 });
+  } catch (err: any) {
+    console.error("Unexpected error:", err);
+    return NextResponse.json({ error: "Unexpected server error" }, { status: 500 });
+  }
+}
+
diff --git a/app/api/profile-id/route.ts b/app/api/profile-id/route.ts
new file mode 100644
index 0000000..4b19641
--- /dev/null
+++ b/app/api/profile-id/route.ts
@@ -0,0 +1,39 @@
+import { NextResponse } from "next/server";
+import { cookies } from "next/headers";
+
+// ブラウザ識別用Cookie名（任意）
+const COOKIE_NAME = "finlit_vid";
+
+function newVid() {
+  // Node/Edge両対応のUUID
+  // @ts-ignore
+  return (globalThis.crypto ?? require("crypto").webcrypto).randomUUID();
+}
+
+// 既存VIDの確認（副作用なし）
+export async function GET() {
+  const cookieStore = await cookies();
+  const existing = cookieStore.get(COOKIE_NAME)?.value ?? null;
+  return NextResponse.json({ vid: existing });
+}
+
+// VIDが無ければ「発行」して返す（←ここで Cookie を set する）
+export async function POST() {
+  const cookieStore = await cookies();
+  let vid = cookieStore.get(COOKIE_NAME)?.value;
+
+  if (!vid) {
+    vid = newVid();
+    const res = NextResponse.json({ vid });
+    res.cookies.set(COOKIE_NAME, vid, {
+      httpOnly: true,
+      sameSite: "lax",
+      secure: process.env.NODE_ENV === "production",
+      path: "/",
+      maxAge: 60 * 60 * 24 * 365, // 1年
+    });
+    return res;
+  }
+  return NextResponse.json({ vid });
+}
+
diff --git a/app/api/profile/init/route.ts b/app/api/profile/init/route.ts
new file mode 100644
index 0000000..cf90aa1
--- /dev/null
+++ b/app/api/profile/init/route.ts
@@ -0,0 +1,45 @@
+// app/api/profile/init/route.ts
+import { cookies } from "next/headers";
+import { NextResponse } from "next/server";
+import { randomUUID } from "crypto";
+import { createClient } from "@/app/_supabase/server";
+
+const COOKIE_NAME = "vid";
+
+export async function POST() {
+  const cookieStore = cookies();
+  let vid = cookieStore.get(COOKIE_NAME)?.value;
+
+  const supabase = createClient();
+
+  // 既に cookie があれば、その visitor_id のプロフィールを探す／なければ作る
+  if (!vid) {
+    vid = randomUUID();
+    // cookie をここ（Route）で発行：← Server Action/Route ならOK
+    cookieStore.set(COOKIE_NAME, vid, {
+      httpOnly: true,
+      sameSite: "lax",
+      secure: process.env.NODE_ENV === "production",
+      path: "/",
+      maxAge: 60 * 60 * 24 * 365, // 1年
+    });
+  }
+
+  // profiles に既存が無ければ作る
+  // テーブル: public.profiles(id uuid PK, user_id uuid null, visitor_id uuid null, created_at ...)
+  // id はアプリで使う profile_id
+  const { data: existing } = await supabase
+    .from("profiles")
+    .select("id")
+    .eq("visitor_id", vid)
+    .maybeSingle();
+
+  let profileId = existing?.id;
+  if (!profileId) {
+    profileId = randomUUID();
+    await supabase.from("profiles").insert({ id: profileId, visitor_id: vid });
+  }
+
+  return NextResponse.json({ profileId, visitorId: vid });
+}
+
diff --git a/app/api/profile/route.ts b/app/api/profile/route.ts
new file mode 100644
index 0000000..8f5c3f8
--- /dev/null
+++ b/app/api/profile/route.ts
@@ -0,0 +1,12 @@
+import { NextResponse } from 'next/server';
+import { ensureProfile } from '@/app/_supabase/server';
+
+export async function GET() {
+  try {
+    const me = await ensureProfile();
+    return NextResponse.json({ ok: true, profile: me }, { status: 200 });
+  } catch (e: any) {
+    return NextResponse.json({ ok: false, error: e?.message ?? 'unknown' }, { status: 500 });
+  }
+}
+
diff --git a/app/budgets/_BudgetForm.tsx b/app/budgets/_BudgetForm.tsx
new file mode 100644
index 0000000..3165466
--- /dev/null
+++ b/app/budgets/_BudgetForm.tsx
@@ -0,0 +1,128 @@
+"use client";
+
+import React, { useEffect, useMemo, useState } from "react";
+
+type Kind = "expense" | "income";
+type Category = { id: string; name: string; kind: Kind };
+
+export default function BudgetForm() {
+  // ーー 画面状態 ーーーーーーーーーーーーーーーーーーーーーーー
+  const [month, setMonth] = useState<string>(() => {
+    const d = new Date();
+    const m = String(d.getMonth() + 1).padStart(2, "0");
+    return `${d.getFullYear()}-${m}`;
+  });
+  const [amount, setAmount] = useState<string>("");
+  const [categoryId, setCategoryId] = useState<string>("");
+  const [loading, setLoading] = useState(false);
+  const [msg, setMsg] = useState<string | null>(null);
+
+  // ーー カテゴリ取得（共通 API を使用） ーーーーーーーーーーーーーー
+  const [categories, setCategories] = useState<Category[]>([]);
+  useEffect(() => {
+    let abort = false;
+    (async () => {
+      setMsg(null);
+      try {
+        const res = await fetch("/api/categories?select=id,name,kind", { cache: "no-store" });
+        if (!res.ok) throw new Error("カテゴリ取得に失敗しました");
+        const json = (await res.json()) as { ok: boolean; categories: Category[] };
+        if (!json.ok) throw new Error("カテゴリ取得に失敗しました");
+        if (!abort) setCategories(json.categories);
+      } catch (e: any) {
+        if (!abort) setMsg(e?.message ?? "カテゴリ取得に失敗しました");
+      }
+    })();
+    return () => {
+      abort = true;
+    };
+  }, []);
+
+  // 予算は「支出カテゴリ」のみを対象
+  const expenseCategories = useMemo(
+    () => categories.filter((c) => c.kind === "expense"),
+    [categories]
+  );
+
+  // ーー 送信 ーーーーーーーーーーーーーーーーーーーーーーーーーー
+  async function onSubmit(e: React.FormEvent) {
+    e.preventDefault();
+    setMsg(null);
+    if (!categoryId) return setMsg("カテゴリを選んでください");
+    if (!amount || isNaN(Number(amount))) return setMsg("金額を正しく入力してください");
+
+    try {
+      setLoading(true);
+      const body = {
+        yyyymm: month.replace("-", ""),
+        categoryId,
+        amount: Number(amount),
+      };
+      const res = await fetch("/api/budgets/add", {
+        method: "POST",
+        headers: { "content-type": "application/json" },
+        body: JSON.stringify(body),
+      });
+      const json = await res.json();
+      if (!res.ok || !json.ok) throw new Error(json.error ?? "登録に失敗しました");
+      setMsg("予算を保存しました");
+      setAmount("");
+      // 必要なら一覧の再取得など
+    } catch (e: any) {
+      setMsg(e?.message ?? "登録に失敗しました");
+    } finally {
+      setLoading(false);
+    }
+  }
+
+  // ーー UI ーーーーーーーーーーーーーーーーーーーーーーーーーーー
+  return (
+    <form onSubmit={onSubmit} className="space-y-4">
+      <div>
+        <label className="block text-sm mb-1">対象月</label>
+        <input
+          type="month"
+          value={month}
+          onChange={(e) => setMonth(e.target.value)}
+          className="input"
+          required
+        />
+      </div>
+
+      <div>
+        <label className="block text-sm mb-1">カテゴリ（支出）</label>
+        <select
+          className="input"
+          value={categoryId}
+          onChange={(e) => setCategoryId(e.target.value)}
+        >
+          <option value="">（選択なし）</option>
+          {expenseCategories.map((c) => (
+            <option key={c.id} value={c.id}>
+              {c.name}
+            </option>
+          ))}
+        </select>
+      </div>
+
+      <div>
+        <label className="block text-sm mb-1">金額（円）</label>
+        <input
+          type="number"
+          inputMode="numeric"
+          className="input"
+          placeholder="例）15000"
+          value={amount}
+          onChange={(e) => setAmount(e.target.value)}
+        />
+      </div>
+
+      <button className="btn" disabled={loading}>
+        {loading ? "保存中…" : "追加"}
+      </button>
+
+      {msg && <p className="text-sm text-muted">{msg}</p>}
+    </form>
+  );
+}
+
diff --git a/app/budgets/page.tsx b/app/budgets/page.tsx
index a5a75d0..c0967bb 100644
--- a/app/budgets/page.tsx
+++ b/app/budgets/page.tsx
@@ -1,165 +1,72 @@
-'use client';
-
-import { useEffect, useMemo, useState } from 'react';
-import { createClientComponentClient } from '@supabase/auth-helpers-nextjs';
-import { getCurrentProfileId } from '../_utils/getCurrentProfileId';
-
-type BudgetRow = { id: number; category: string; amount: number; yyyymm: string };
-const CATEGORIES = ['食費', '交通', '日用品', '通信', '娯楽', '米', 'その他'];
-
-// "2025-09" -> "202509"
-function yyyymmFromMonth(month: string) {
-  return month.replace('-', '');
+// app/budgets/page.tsx
+import { createClient } from "@/app/_supabase/server";
+import BudgetForm from "./_BudgetForm";
+import { revalidatePath } from "next/cache";
+
+export const revalidate = 0;           // ← 常に最新
+export const dynamic = "force-dynamic"; // ← 動的レンダリングを強制（保険）
+
+async function getProfileId(): Promise<string> {
+  const base = process.env.NEXT_PUBLIC_BASE_URL ?? "http://localhost:3000";
+  const res = await fetch(`${base}/api/profile`, { cache: "no-store" });
+  if (!res.ok) throw new Error("プロフィール取得に失敗しました");
+  const json = (await res.json()) as { vid: string };
+  return json.vid;
 }
 
-export default function BudgetsPage() {
-  const supabase = createClientComponentClient();
+type Category = { id: string; name: string; kind: "expense" | "income" };
 
-  // 月UI
-  const [month, setMonth] = useState<string>(() => {
-    const d = new Date();
-    return `${d.getFullYear()}-${String(d.getMonth() + 1).padStart(2, '0')}`;
-  });
-  const yyyymm = useMemo(() => yyyymmFromMonth(month), [month]);
+async function fetchCategories(profileId: string): Promise<Category[]> {
+  const supabase = createClient();
+  const { data, error } = await supabase
+    .from("categories")
+    .select("id,name,kind")
+    .eq("profile_id", profileId)
+    .order("kind", { ascending: true })
+    .order("name", { ascending: true });
 
-  // 一覧
-  const [rows, setRows] = useState<BudgetRow[]>([]);
-  const [loading, setLoading] = useState(false);
-
-  // フォーム
-  const [category, setCategory] = useState(CATEGORIES[0]);
-  const [amount, setAmount] = useState<number | ''>('');
-
-  // 一覧取得
-  useEffect(() => {
-    (async () => {
-      const profileId = await getCurrentProfileId(supabase);
-      if (!profileId) return;
-      const { data, error } = await supabase
-        .from('budgets')
-        .select('id, category, amount, yyyymm')
-        .eq('profile_id', profileId)
-        .eq('yyyymm', yyyymm)
-        .order('category', { ascending: true });
-      if (!error && data) setRows(data as BudgetRow[]);
-    })();
-  }, [supabase, yyyymm]);
+  if (error) throw error;
+  return (data ?? []) as Category[];
+}
 
-  // 追加
-  async function handleAdd() {
-    if (amount === '' || Number.isNaN(Number(amount))) {
-      alert('金額を入力してください');
-      return;
-    }
-    setLoading(true);
-    try {
-      const profileId = await getCurrentProfileId(supabase);
-      if (!profileId) throw new Error('profile_id が取得できませんでした');
+// 予算の登録（例）
+export async function createBudget(formData: FormData) {
+  "use server";
+  const supabase = createClient();
 
-      const payload = {
-        profile_id: profileId,
-        category,
-        amount: Math.abs(Number(amount)), // 予算は常に正
-        yyyymm,
-      };
-      const { error } = await supabase.from('budgets').insert(payload);
-      if (error) throw error;
+  const profileId = String(formData.get("profileId") ?? "");
+  const categoryId = String(formData.get("categoryId") ?? "");
+  const amount = Number(formData.get("amount") ?? 0);
+  const yyyymm = String(formData.get("yyyymm") ?? "");
 
-      // 再取得
-      const { data, error: e2 } = await supabase
-        .from('budgets')
-        .select('id, category, amount, yyyymm')
-        .eq('profile_id', profileId)
-        .eq('yyyymm', yyyymm)
-        .order('category', { ascending: true });
-      if (e2) throw e2;
-      setRows((data ?? []) as BudgetRow[]);
-      setAmount('');
-    } catch (e: any) {
-      alert(`保存に失敗しました: ${e?.message ?? e}`);
-    } finally {
-      setLoading(false);
-    }
+  if (!profileId || !categoryId || !amount) {
+    throw new Error("必須項目が不足しています");
   }
 
-  return (
-    <div className="p-6 space-y-6">
-      <h1 className="text-2xl font-bold">予算</h1>
-
-      {/* 月選択 */}
-      <div className="flex items-center gap-3">
-        <input
-          type="month"
-          value={month}
-          onChange={(e) => setMonth(e.target.value)}
-          className="border rounded px-3 py-2 bg-black/20 border-white/20"
-        />
-        <span className="text-sm opacity-70">対象: {yyyymm}</span>
-      </div>
-
-      {/* 追加フォーム */}
-      <div className="flex items-end gap-3">
-        <div className="flex flex-col">
-          <label className="text-sm mb-1">カテゴリ</label>
-          <select
-            value={category}
-            onChange={(e) => setCategory(e.target.value)}
-            className="border rounded px-3 py-2 bg-black/20 border-white/20 min-w-[140px]"
-          >
-            {CATEGORIES.map((c) => (
-              <option key={c} value={c}>{c}</option>
-            ))}
-          </select>
-        </div>
+  const { error } = await supabase.from("budgets").insert({
+    profile_id: profileId,
+    category_id: categoryId,
+    amount,
+    yyyymm: yyyymm || null,
+  });
+  if (error) throw error;
 
-        <div className="flex flex-col">
-          <label className="text-sm mb-1">金額（円）</label>
-          <input
-            type="number"
-            inputMode="numeric"
-            value={amount}
-            onChange={(e) => setAmount(e.target.value === '' ? '' : Number(e.target.value))}
-            className="border rounded px-3 py-2 bg-black/20 border-white/20"
-            placeholder="例) 15000"
-          />
-        </div>
+  revalidatePath("/budgets");
+  revalidatePath("/log");
+}
 
-        <button
-          onClick={handleAdd}
-          disabled={loading}
-          className="px-4 py-2 rounded-lg bg-brand text-black border border-brand/40 hover:opacity-90 disabled:opacity-50"
-        >
-          追加
-        </button>
-      </div>
+export default async function Page() {
+  const profileId = await getProfileId();
+  const categories = await fetchCategories(profileId);
 
-      {/* 一覧 */}
-      <table className="w-full border-collapse">
-        <thead>
-          <tr>
-            <th className="px-4 py-2 text-left">カテゴリ</th>
-            <th className="px-4 py-2 text-right">予算</th>
-            <th className="px-4 py-2 text-right">yyyyMM</th>
-          </tr>
-        </thead>
-        <tbody>
-          {rows.length === 0 ? (
-            <tr>
-              <td className="px-4 py-4" colSpan={3}>
-                この月のデータがありません。まずは予算を追加してみてください。
-              </td>
-            </tr>
-          ) : (
-            rows.map((r) => (
-              <tr key={r.id} className="border-t border-white/10">
-                <td className="px-4 py-2">{r.category}</td>
-                <td className="px-4 py-2 text-right">{r.amount.toLocaleString()}円</td>
-                <td className="px-4 py-2 text-right">{r.yyyymm}</td>
-              </tr>
-            ))
-          )}
-        </tbody>
-      </table>
+  return (
+    <div className="mx-auto max-w-3xl p-6 space-y-6">
+      <h1 className="text-xl font-semibold">予算の追加</h1>
+      <BudgetForm
+        profileId={profileId}
+        categories={categories}
+        onSubmit={createBudget}
+      />
     </div>
   );
 }
diff --git a/app/categories/page.tsx b/app/categories/page.tsx
index ab5d309..4f22f78 100644
--- a/app/categories/page.tsx
+++ b/app/categories/page.tsx
@@ -1,158 +1,50 @@
 'use client';
 
-import { useEffect, useState } from "react";
-import Link from "next/link";
-import { createClientComponentClient } from "@supabase/auth-helpers-nextjs";
-import { getCurrentProfileId } from "../_utils/getCurrentProfileId";
+import { useEffect, useState } from 'react';
+import { supabase } from '@/src/lib/supabaseClient';
 
-type Category = { id: string; name: string; kind: "expense" | "income"; color: string };
+type Category = { id: string; name: string; kind: 'expense' | 'income'; color: string };
 
 export default function CategoriesPage() {
-  const supabase = createClientComponentClient();
-
-  const [list, setList] = useState<Category[]>([]);
-  const [loading, setLoading] = useState(false);
-
-  // フォーム
-  const [name, setName] = useState("");
-  const [kind, setKind] = useState<"expense" | "income">("expense");
-  const [color, setColor] = useState("#22c55e");
-
-  async function fetchList() {
-    const profileId = await getCurrentProfileId(supabase);
-    if (!profileId) return;
-    const { data, error } = await supabase
-      .from("categories")
-      .select("id, name, kind, color")
-      .eq("profile_id", profileId)
-      .order("name", { ascending: true });
-    if (!error && data) setList(data as Category[]);
-  }
+  const [rows, setRows] = useState<Category[] | null>(null);
+  const [error, setError] = useState<string | null>(null);
 
   useEffect(() => {
-    fetchList();
-  }, []); // fetchList 内で supabase を使うが、初回読み込みだけでOK
-
-  async function handleAdd() {
-    if (!name.trim()) {
-      alert("カテゴリ名を入力してください");
-      return;
-    }
-    setLoading(true);
-    try {
-      const profileId = await getCurrentProfileId(supabase);
-      if (!profileId) throw new Error("profile_id を取得できませんでした");
-
-      const payload = {
-        profile_id: profileId,
-        name: name.trim(),
-        kind,
-        color,
-      };
-      const { error } = await supabase.from("categories").insert(payload);
-      if (error) throw error;
-
-      setName("");
-      await fetchList();
-    } catch (e: any) {
-      alert(`保存に失敗しました: ${e?.message ?? e}`);
-    } finally {
-      setLoading(false);
-    }
-  }
+    (async () => {
+      setError(null);
+      setRows(null);
+      try {
+        const { data, error } = await supabase
+          .from('categories')
+          .select('*')
+          .order('name', { ascending: true });
+        if (error) setError(error.message);
+        else setRows((data as Category[]) ?? []);
+      } catch (e: any) {
+        setError(e?.message ?? String(e));
+      }
+    })();
+  }, []);
 
   return (
-    <div className="p-6 space-y-6">
-      <h1 className="text-2xl font-bold">カテゴリ管理</h1>
-
-      <div className="flex items-center gap-2 text-sm">
-        <Link href="/dashboard" className="underline opacity-80 hover:opacity-100">ダッシュボード</Link>
-        <span> / </span>
-        <span className="opacity-70">カテゴリ</span>
-      </div>
-
-      {/* 追加フォーム */}
-      <div className="grid grid-cols-1 md:grid-cols-4 gap-3">
-        <div className="flex flex-col">
-          <label className="text-sm mb-1">カテゴリ名</label>
-          <input
-            value={name}
-            onChange={(e) => setName(e.target.value)}
-            className="border rounded px-3 py-2 bg-black/20 border-white/20"
-            placeholder="例) アルバイト収入"
-          />
-        </div>
-
-        <div className="flex flex-col">
-          <label className="text-sm mb-1">種別</label>
-          <select
-            value={kind}
-            onChange={(e) => setKind(e.target.value as "expense" | "income")}
-            className="border rounded px-3 py-2 bg-black/20 border-white/20"
-          >
-            <option value="expense">支出</option>
-            <option value="income">収入</option>
-          </select>
-        </div>
-
-        <div className="flex flex-col">
-          <label className="text-sm mb-1">カラー</label>
-          <input
-            type="color"
-            value={color}
-            onChange={(e) => setColor(e.target.value)}
-            className="h-[42px] w-full border rounded bg-black/20 border-white/20"
-          />
-        </div>
-
-        <div className="flex items-end">
-          <button
-            onClick={handleAdd}
-            disabled={loading}
-            className="px-4 py-2 rounded-lg bg-brand text-black border border-brand/40 hover:opacity-90 disabled:opacity-50 w-full"
-          >
-            追加
-          </button>
-        </div>
-      </div>
-
-      {/* 一覧 */}
-      <table className="w-full border-collapse">
-        <thead>
-          <tr>
-            <th className="px-4 py-2 text-left">名前</th>
-            <th className="px-4 py-2 text-left">種別</th>
-            <th className="px-4 py-2 text-left">色</th>
-          </tr>
-        </thead>
-        <tbody>
-          {list.length === 0 ? (
-            <tr>
-              <td className="px-4 py-4" colSpan={3}>
-                まだカテゴリがありません。フォームから追加してください。
-              </td>
-            </tr>
-          ) : (
-            list.map((c) => (
-              <tr key={c.id} className="border-t border-white/10">
-                <td className="px-4 py-2">{c.name}</td>
-                <td className="px-4 py-2">{c.kind === "income" ? "収入" : "支出"}</td>
-                <td className="px-4 py-2">
-                  <span className="inline-flex items-center gap-2">
-                    <span
-                      className="inline-block w-4 h-4 rounded"
-                      style={{ backgroundColor: c.color }}
-                      aria-label={c.color}
-                      title={c.color}
-                    />
-                    <span className="opacity-70">{c.color}</span>
-                  </span>
-                </td>
-              </tr>
-            ))
-          )}
-        </tbody>
-      </table>
-    </div>
+    <main className="p-4 space-y-4">
+      <h1 className="text-xl font-bold">カテゴリ</h1>
+      {error && <div className="text-red-400 text-sm">エラー: {error}</div>}
+      {!rows && !error && <div>読み込み中...</div>}
+      {rows && (
+        <ul className="space-y-2">
+          {rows.map((c) => (
+            <li key={c.id} className="border border-zinc-700 rounded p-2 flex items-center justify-between">
+              <span className="flex items-center gap-2">
+                <span className="inline-block w-3 h-3 rounded-full" style={{ background: c.color }} />
+                {c.name}
+              </span>
+              <span className="opacity-70 text-sm">{c.kind}</span>
+            </li>
+          ))}
+        </ul>
+      )}
+    </main>
   );
 }
+
diff --git a/app/dashboard/page.backup.tsx b/app/dashboard/page.backup.tsx
new file mode 100644
index 0000000..346195f
--- /dev/null
+++ b/app/dashboard/page.backup.tsx
@@ -0,0 +1,218 @@
+"use client";
+
+import { useEffect, useMemo, useState } from "react";
+import { supabase } from "@/app/_supabase"; // ←必要に応じてパス調整
+
+// 現在年月(YYYYMM)
+const NOW_YYYYMM = (() => {
+  const d = new Date();
+  const y = d.getFullYear();
+  const m = String(d.getMonth() + 1).padStart(2, "0");
+  return `${y}${m}`;
+})();
+
+// YYYYMM → 月初/翌月初 (YYYY-MM-DD)
+function monthRange(yyyymm: string): readonly [string, string] {
+  const y = Number(yyyymm.slice(0, 4));
+  const m = Number(yyyymm.slice(4, 6));
+  const s = new Date(Date.UTC(y, m - 1, 1));
+  const e = new Date(Date.UTC(y, m, 1)); // 翌月1日
+  const toStr = (dt: Date) =>
+    `${dt.getUTCFullYear()}-${String(dt.getUTCMonth() + 1).padStart(2, "0")}-01`;
+  return [toStr(s), toStr(e)] as const;
+}
+
+// 訪問者の profile_id をローカルから取得（無ければ作る）
+async function getOrCreateProfileId(): Promise<string> {
+  const KEYS = ["visitor_id", "finlit_visitor_id"];
+  let vid: string | null = null;
+  for (const k of KEYS) {
+    const v = typeof window !== "undefined" ? localStorage.getItem(k) : null;
+    if (v) {
+      vid = v;
+      break;
+    }
+  }
+  if (!vid) {
+    vid = crypto.randomUUID();
+    localStorage.setItem("visitor_id", vid);
+    for (const k of KEYS) if (k !== "visitor_id") localStorage.setItem(k, vid);
+  }
+
+  // users: id = profiles.id, visitor_id
+  const { data: u, error: ue } = await supabase
+    .from("users")
+    .select("id")
+    .eq("visitor_id", vid)
+    .maybeSingle();
+
+  if (!ue && u?.id) return u.id;
+
+  const profileId = crypto.randomUUID();
+  // profiles を作成（既存なら 23505 を許容）
+  const { error: pe } = await supabase
+    .from("profiles")
+    .insert({ id: profileId })
+    .select("id")
+    .single();
+  if (pe && pe.code !== "23505") throw pe;
+
+  const { error: ue2 } = await supabase
+    .from("users")
+    .insert({ id: profileId, visitor_id: vid })
+    .select("id")
+    .single();
+  if (ue2 && ue2.code !== "23505") throw ue2;
+
+  return profileId;
+}
+
+type Row = { category: string; budget: number; actual: number };
+
+export default function Page() {
+  const [yyyymm, setYyyymm] = useState(NOW_YYYYMM);
+  const [profileId, setProfileId] = useState<string | null>(null);
+  const [rows, setRows] = useState<Row[] | null>(null);
+  const [err, setErr] = useState<string | null>(null);
+
+  useEffect(() => {
+    getOrCreateProfileId().then(setProfileId).catch((e) => {
+      console.error(e);
+      setErr(e?.message ?? String(e));
+    });
+  }, []);
+
+  useEffect(() => {
+    if (!profileId) return;
+    (async () => {
+      setErr(null);
+      setRows(null);
+
+      try {
+        // ① 予算（該当月）
+        const { data: bdata, error: bErr } = await supabase
+          .from("budgets")
+          .select("category, amount, yyyymm")
+          .eq("yyyymm", yyyymm);
+        if (bErr) throw bErr;
+
+        const budgetMap = new Map<string, number>();
+        for (const b of bdata ?? []) {
+          const key = String(b.category);
+          const val = Number(b.amount) || 0;
+          budgetMap.set(key, (budgetMap.get(key) || 0) + val);
+        }
+
+        // ② 記録（該当月、支出のみ、ログイン不要）
+        const [from, to] = monthRange(yyyymm);
+        const { data: ldata, error: lErr } = await supabase
+          .from("logs")
+          .select("category, amount, is_income, ymd, profile_id")
+          .eq("profile_id", profileId)
+          .eq("is_income", false)
+          .gte("ymd", from)
+          .lt("ymd", to);
+        if (lErr) throw lErr;
+
+        const actualMap = new Map<string, number>();
+        for (const r of ldata ?? []) {
+          const key = String(r.category);
+          const val = Math.abs(Number(r.amount) || 0);
+          actualMap.set(key, (actualMap.get(key) || 0) + val);
+        }
+
+        // ③ カテゴリの和集合で行を作る（＝予算なしでも記録だけで表示）
+        const cats = new Set<string>([
+          ...budgetMap.keys(),
+          ...actualMap.keys(),
+        ]);
+        const next: Row[] = [...cats]
+          .sort((a, b) => a.localeCompare(b, "ja"))
+          .map((c) => ({
+            category: c,
+            budget: budgetMap.get(c) || 0,
+            actual: actualMap.get(c) || 0,
+          }));
+
+        setRows(next);
+      } catch (e: any) {
+        console.error(e);
+        setErr(e?.message ?? String(e));
+      }
+    })();
+  }, [profileId, yyyymm]);
+
+  const totals = useMemo(
+    () =>
+      (rows ?? []).reduce(
+        (a, r) => {
+          a.budget += r.budget;
+          a.actual += r.actual;
+          return a;
+        },
+        { budget: 0, actual: 0 }
+      ),
+    [rows]
+  );
+
+  return (
+    <main className="p-4 space-y-4">
+      <h1 className="text-xl font-bold">ダッシュボード</h1>
+
+      <div className="flex items-center gap-2">
+        <span>対象:</span>
+        <input
+          value={yyyymm}
+          onChange={(e) => setYyyymm(e.target.value.replace(/\D/g, ""))}
+          className="border rounded px-2 py-1 bg-transparent"
+          placeholder="YYYYMM"
+          inputMode="numeric"
+          maxLength={6}
+        />
+      </div>
+
+      {err && <div className="text-red-400 text-sm">取得失敗: {err}</div>}
+      {!rows && !err && <div>読み込み中...</div>}
+
+      {rows && (
+        <div className="space-y-2">
+          <div className="text-sm opacity-70">
+            合計 予算: {totals.budget.toLocaleString()} 円 / 実績:{" "}
+            {totals.actual.toLocaleString()} 円
+          </div>
+
+          <table className="w-full border border-zinc-700 rounded text-sm">
+            <thead>
+              <tr className="bg-zinc-800">
+                <th className="text-left p-2">カテゴリ</th>
+                <th className="text-right p-2">予算</th>
+                <th className="text-right p-2">実績</th>
+                <th className="text-right p-2">差額</th>
+              </tr>
+            </thead>
+            <tbody>
+              {rows.map((r) => {
+                const diff = (r.budget || 0) - (r.actual || 0);
+                return (
+                  <tr key={r.category} className="border-t border-zinc-700">
+                    <td className="p-2">{r.category}</td>
+                    <td className="p-2 text-right">
+                      {Number(r.budget).toLocaleString()}
+                    </td>
+                    <td className="p-2 text-right">
+                      {Number(r.actual).toLocaleString()}
+                    </td>
+                    <td className="p-2 text-right">
+                      {diff.toLocaleString()}
+                    </td>
+                  </tr>
+                );
+              })}
+            </tbody>
+          </table>
+        </div>
+      )}
+    </main>
+  );
+}
+
diff --git a/app/dashboard/page.tsx b/app/dashboard/page.tsx
index 7d7f287..86077b3 100644
--- a/app/dashboard/page.tsx
+++ b/app/dashboard/page.tsx
@@ -1,149 +1,27 @@
-"use client";
+import { createClient } from "@/app/_supabase/server";
 
-import React, { useEffect, useMemo, useState } from "react";
-import { getSupabaseClient } from "@/lib/supabaseClient";
-import { getCurrentProfileId } from "../_utils/getCurrentProfileId";
-import { fetchBudgetVsActualRows, calcTotals, VRow } from "../_utils/budgetVsActualView";
+export default async function Page() {
+  const supabase = createClient();
 
-function toYyyymm(d: Date) {
-  const y = d.getFullYear();
-  const m = d.getMonth() + 1;
-  return `${y}${String(m).padStart(2, "0")}`;
-}
-
-function toMonthStartISO(d: Date) {
-  const y = d.getFullYear();
-  const m = d.getMonth() + 1;
-  return `${y}-${String(m).padStart(2, "0")}-01`;
-}
-
-export default function DashboardPage() {
-  const supabase = getSupabaseClient();
-  const [loading, setLoading] = useState(false);
-  const [rows, setRows] = useState<VRow[]>([]);
-  const [profileId, setProfileId] = useState<string>("");
-  const [monthDate, setMonthDate] = useState<Date>(() => {
-    const t = new Date();
-    return new Date(t.getFullYear(), t.getMonth(), 1);
-  });
-
-  const yyyymm = useMemo(() => toYyyymm(monthDate), [monthDate]);
-
-  useEffect(() => {
-    (async () => {
-      setLoading(true);
-      try {
-        const pid = await getCurrentProfileId(supabase);
-        setProfileId(pid);
+  const profileId = "f241530f-2225-4a35-9294-9c965774dca3"; 
+  const yyyymm = "202509";
 
-        const { rows } = await fetchBudgetVsActualRows({ profileId: pid, yyyymm });
-        setRows(rows);
-      } catch (e: any) {
-        alert(`ダッシュボード取得失敗: ${e?.message ?? e}`);
-      } finally {
-        setLoading(false);
-      }
-    })();
-  }, [supabase, yyyymm]);
+  const { data, error } = await supabase
+    .from("budgets")
+    .select("id, amount, category_id")
+    .eq("profile_id", profileId)
+    .eq("yyyymm", yyyymm);
 
-  const { budgetTotal, actualTotal, progress } = useMemo(
-    () => calcTotals(rows),
-    [rows]
-  );
+  if (error) {
+    console.error(error);
+    return <div>エラー: {error.message}</div>;
+  }
 
   return (
-    <main className="mx-auto max-w-5xl px-4 py-8">
-      <div className="mb-6 flex items-center justify-between">
-        <h1 className="text-2xl font-bold">ダッシュボード</h1>
-
-        <div className="flex items-center gap-2">
-          <button
-            className="rounded border px-2 py-1"
-            onClick={() =>
-              setMonthDate((d) => new Date(d.getFullYear(), d.getMonth() - 1, 1))
-            }
-          >
-            ←
-          </button>
-
-          <input
-            type="month"
-            value={`${monthDate.getFullYear()}-${String(
-              monthDate.getMonth() + 1
-            ).padStart(2, "0")}`}
-            onChange={(e) => {
-              const [y, m] = e.currentTarget.value.split("-").map(Number);
-              setMonthDate(new Date(y, (m ?? 1) - 1, 1));
-            }}
-            className="rounded border px-2 py-1"
-          />
-
-          <button
-            className="rounded border px-2 py-1"
-            onClick={() =>
-              setMonthDate((d) => new Date(d.getFullYear(), d.getMonth() + 1, 1))
-            }
-          >
-            →
-          </button>
-        </div>
-      </div>
-
-      <p className="mb-4 text-sm text-neutral-400">
-        期間: {toMonthStartISO(monthDate)} 〜 / 予算: {budgetTotal.toLocaleString()}円・実績:{" "}
-        {actualTotal.toLocaleString()}円・進捗: {progress}%
-      </p>
-
-      <div className="overflow-x-auto rounded border">
-        <table className="min-w-full text-sm">
-          <thead className="bg-neutral-900">
-            <tr>
-              <th className="px-4 py-2 text-left">カテゴリ</th>
-              <th className="px-4 py-2 text-right">予算</th>
-              <th className="px-4 py-2 text-right">実績</th>
-              <th className="px-4 py-2 text-right">差額(予算-実績)</th>
-            </tr>
-          </thead>
-          <tbody>
-            {loading ? (
-              <tr>
-                <td className="px-4 py-4" colSpan={4}>
-                  読み込み中…
-                </td>
-              </tr>
-            ) : rows.length === 0 ? (
-              <tr>
-                <td className="px-4 py-4" colSpan={4}>
-                  この月のデータがありません。まずは「予算」や「記録」を追加してみてください。
-                </td>
-              </tr>
-            ) : (
-              rows.map((r) => {
-                const diff = (r.budget_amount ?? 0) - (r.actual_amount ?? 0);
-                return (
-                  <tr key={`${r.category}-${r.yyyymm}`}>
-                    <td className="border-t px-4 py-2">{r.category}</td>
-                    <td className="border-t px-4 py-2 text-right">
-                      {r.budget_amount.toLocaleString()}円
-                    </td>
-                    <td className="border-t px-4 py-2 text-right">
-                      {r.actual_amount.toLocaleString()}円
-                    </td>
-                    <td
-                      className={`border-t px-4 py-2 text-right ${
-                        diff < 0 ? "text-red-400" : "text-green-400"
-                      }`}
-                    >
-                      {diff.toLocaleString()}円
-                    </td>
-                  </tr>
-                );
-              })
-            )}
-          </tbody>
-        </table>
-      </div>
-    </main>
+    <div>
+      <h1>ダッシュボード</h1>
+      <pre>{JSON.stringify(data, null, 2)}</pre>
+    </div>
   );
 }
 
diff --git a/app/forgot-password/page.tsx b/app/forgot-password/page.tsx
new file mode 100644
index 0000000..5d0dbf8
--- /dev/null
+++ b/app/forgot-password/page.tsx
@@ -0,0 +1,46 @@
+"use client";
+import { useState } from "react";
+import { createClientComponentClient } from "@supabase/auth-helpers-nextjs";
+
+export default function ForgotPasswordPage() {
+  const supabase = createClientComponentClient();
+  const [email, setEmail] = useState("");
+  const [msg, setMsg] = useState<string | null>(null);
+  const [err, setErr] = useState<string | null>(null);
+  const [loading, setLoading] = useState(false);
+
+  async function onSubmit(e: React.FormEvent) {
+    e.preventDefault();
+    setMsg(null);
+    setErr(null);
+    setLoading(true);
+    const { error } = await supabase.auth.resetPasswordForEmail(email, {
+      redirectTo: `${location.origin}/reset-password`,
+    });
+    setLoading(false);
+    if (error) return setErr(error.message);
+    setMsg("再設定用のメールを送信しました。受信箱を確認してください。");
+  }
+
+  return (
+    <div className="max-w-sm mx-auto space-y-4">
+      <h1 className="text-xl font-bold">パスワード再設定メールを送る</h1>
+      <form onSubmit={onSubmit} className="space-y-3">
+        <input
+          type="email"
+          className="input w-full"
+          placeholder="あなたのメールアドレス"
+          value={email}
+          onChange={(e) => setEmail(e.target.value)}
+          required
+        />
+        <button className="btn w-full" disabled={loading}>
+          {loading ? "送信中…" : "メールを送信"}
+        </button>
+      </form>
+      {msg && <p className="text-green-500 text-sm">{msg}</p>}
+      {err && <p className="text-red-500 text-sm">{err}</p>}
+    </div>
+  );
+}
+
diff --git a/app/layout.tsx b/app/layout.tsx
index 87dd91a..ea2d90e 100644
--- a/app/layout.tsx
+++ b/app/layout.tsx
@@ -1,7 +1,9 @@
+// app/layout.tsx
 export const dynamic = 'force-static';
 import type { Metadata } from "next";
 import "./globals.css";
 import Nav from "@/components/Nav";
+import AuthBootstrap from "@/components/AuthBootstrap";
 
 export const metadata: Metadata = {
   title: "FinLit PWA",
@@ -19,6 +21,9 @@ export default function RootLayout({ children }: { children: React.ReactNode })
           </div>
         </header>
 
+        {/* ← 匿名セッションの初期化（画面には何も出さない） */}
+        <AuthBootstrap />
+
         <main className="container py-6">
           {children}
         </main>
diff --git a/app/log/_LogForm.tsx b/app/log/_LogForm.tsx
new file mode 100644
index 0000000..d1f986a
--- /dev/null
+++ b/app/log/_LogForm.tsx
@@ -0,0 +1,270 @@
+"use client";
+
+import { useEffect, useMemo, useState } from "react";
+
+type Kind = "expense" | "income";
+
+type Category = {
+  id: string;
+  name: string;
+  kind: Kind;
+  color?: string | null;
+  profile_id?: string | null;
+};
+
+type CategoriesResp =
+  | { ok: true; items: Category[] }
+  | { ok: false; error: string };
+
+type CreateCategoryResp =
+  | { ok: true; item: Category }
+  | { ok: false; error: string };
+
+const CREATE_VALUE = "__create__";
+
+export default function LogForm() {
+  const [kind, setKind] = useState<Kind>("expense");
+  const [categories, setCategories] = useState<Category[]>([]);
+  const [loadingCats, setLoadingCats] = useState(false);
+  const [catsError, setCatsError] = useState<string | null>(null);
+
+  const [amount, setAmount] = useState<string>("");
+  const [categoryId, setCategoryId] = useState<string>("");
+  const [submitLoading, setSubmitLoading] = useState(false);
+  const [submitError, setSubmitError] = useState<string | null>(null);
+  const [submitOk, setSubmitOk] = useState(false);
+
+  // 1) カテゴリ取得
+  useEffect(() => {
+    let aborted = false;
+    (async () => {
+      setLoadingCats(true);
+      setCatsError(null);
+      try {
+        const res = await fetch(`/api/categories?kind=${kind}`, {
+          cache: "no-store",
+        });
+        const data: CategoriesResp = await res.json();
+        if (aborted) return;
+        if (!data.ok) {
+          setCatsError(data.error ?? "カテゴリ取得に失敗しました");
+          setCategories([]);
+          setCategoryId("");
+          return;
+        }
+        setCategories(data.items);
+        // 既存の選択が別種別になったらリセット
+        const stillExists =
+          data.items.find((c) => c.id === categoryId) !== undefined;
+        if (!stillExists) setCategoryId("");
+      } catch (e) {
+        if (!aborted) {
+          setCatsError("カテゴリ取得に失敗しました");
+          setCategories([]);
+          setCategoryId("");
+        }
+      } finally {
+        if (!aborted) setLoadingCats(false);
+      }
+    })();
+    return () => {
+      aborted = true;
+    };
+    // eslint-disable-next-line react-hooks/exhaustive-deps
+  }, [kind]);
+
+  const selectOptions = useMemo(() => {
+    const base = categories
+      .slice()
+      .sort((a, b) => a.name.localeCompare(b.name));
+    return base;
+  }, [categories]);
+
+  // 2) セレクト変更（新規作成もここから）
+  const onChangeCategory = async (value: string) => {
+    if (value !== CREATE_VALUE) {
+      setCategoryId(value);
+      return;
+    }
+    // 新規作成フロー
+    const name = window.prompt("新しいカテゴリ名を入力してください（例：食費）");
+    if (!name) {
+      // キャンセル or 空文字
+      // 直前の選択に戻す
+      setCategoryId("");
+      return;
+    }
+
+    const trimmed = name.trim();
+    if (!trimmed) {
+      alert("カテゴリ名が空です。");
+      setCategoryId("");
+      return;
+    }
+
+    try {
+      // API: POST /api/categories へ作成依頼
+      const res = await fetch("/api/categories", {
+        method: "POST",
+        headers: { "Content-Type": "application/json" },
+        body: JSON.stringify({ name: trimmed, kind }),
+      });
+      const data: CreateCategoryResp = await res.json();
+      if (!data.ok) {
+        alert(data.error ?? "カテゴリの作成に失敗しました。");
+        setCategoryId("");
+        return;
+      }
+
+      // 成功: 一旦ローカルに反映（再取得でもOK）
+      const created = data.item;
+      setCategories((prev) => {
+        // 重複防止
+        const exists = prev.some((c) => c.id === created.id);
+        const next = exists ? prev : [...prev, created];
+        return next;
+      });
+      setCategoryId(created.id);
+    } catch (e) {
+      alert("カテゴリの作成に失敗しました。");
+      setCategoryId("");
+    }
+  };
+
+  // 3) 記録の送信（既存のAPIに合わせてください）
+  const onSubmit = async (e: React.FormEvent) => {
+    e.preventDefault();
+    setSubmitOk(false);
+    setSubmitError(null);
+
+    const value = Number(amount);
+    if (!Number.isFinite(value) || value <= 0) {
+      setSubmitError("金額を正しく入力してください。");
+      return;
+    }
+    if (!categoryId) {
+      setSubmitError("カテゴリを選択してください。");
+      return;
+    }
+
+    setSubmitLoading(true);
+    try {
+      // ここはあなたの既存エンドポイントに合わせてください。
+      // 例1: /api/logs/add を使っていた場合
+      // const res = await fetch("/api/logs/add", {
+      //   method: "POST",
+      //   headers: { "Content-Type": "application/json" },
+      //   body: JSON.stringify({ amount: value, kind, category_id: categoryId }),
+      // });
+
+      // 例2: /api/logs を使う場合（お好みで）
+      const res = await fetch("/api/logs", {
+        method: "POST",
+        headers: { "Content-Type": "application/json" },
+        body: JSON.stringify({ amount: value, kind, category_id: categoryId }),
+      });
+
+      const data = (await res.json()) as { ok?: boolean; error?: string };
+      if (!res.ok || data.ok === false) {
+        throw new Error(data?.error ?? "記録に失敗しました。");
+      }
+      setSubmitOk(true);
+      setAmount("");
+      // 選択はそのままにしておく（連続入力向け）
+    } catch (err: any) {
+      setSubmitError(err?.message ?? "記録に失敗しました。");
+    } finally {
+      setSubmitLoading(false);
+    }
+  };
+
+  return (
+    <div className="mx-auto max-w-3xl p-6">
+      <h1 className="mb-6 text-2xl font-semibold">記録</h1>
+
+      {/* 種別切替 */}
+      <div className="mb-6 flex gap-6">
+        <label className="inline-flex items-center gap-2 cursor-pointer">
+          <input
+            type="radio"
+            name="kind"
+            value="expense"
+            checked={kind === "expense"}
+            onChange={() => setKind("expense")}
+          />
+          <span>支出</span>
+        </label>
+        <label className="inline-flex items-center gap-2 cursor-pointer">
+          <input
+            type="radio"
+            name="kind"
+            value="income"
+            checked={kind === "income"}
+            onChange={() => setKind("income")}
+          />
+          <span>収入</span>
+        </label>
+      </div>
+
+      <form onSubmit={onSubmit} className="grid gap-4 md:grid-cols-[1fr_1fr_auto]">
+        {/* 金額 */}
+        <div className="flex flex-col gap-2">
+          <label className="text-sm opacity-80">金額</label>
+          <input
+            inputMode="numeric"
+            placeholder="例) 500"
+            value={amount}
+            onChange={(e) => setAmount(e.target.value)}
+            className="rounded-md bg-neutral-800 px-3 py-2 outline-none ring-1 ring-neutral-700 focus:ring-2 focus:ring-sky-500"
+          />
+        </div>
+
+        {/* カテゴリ */}
+        <div className="flex flex-col gap-2">
+          <label className="text-sm opacity-80">カテゴリ</label>
+          <select
+            value={categoryId}
+            onChange={(e) => onChangeCategory(e.target.value)}
+            className="rounded-md bg-neutral-800 px-3 py-2 outline-none ring-1 ring-neutral-700 focus:ring-2 focus:ring-sky-500"
+            disabled={loadingCats}
+          >
+            <option value="">{loadingCats ? "読み込み中..." : "(該当なし)"}</option>
+            {selectOptions.map((c) => (
+              <option key={c.id} value={c.id}>
+                {c.name}
+              </option>
+            ))}
+            <option value={CREATE_VALUE}>＋ 新しいカテゴリを作成</option>
+          </select>
+          {catsError && (
+            <p className="text-sm text-red-400">
+              {catsError}
+            </p>
+          )}
+        </div>
+
+        {/* 送信 */}
+        <div className="flex items-end">
+          <button
+            type="submit"
+            disabled={submitLoading}
+            className="rounded-md bg-sky-600 px-5 py-2 font-medium disabled:opacity-60"
+          >
+            {submitLoading ? "記録中..." : "記録する"}
+          </button>
+        </div>
+
+        {/* フィードバック */}
+        <div className="md:col-span-3">
+          {submitError && (
+            <p className="mt-1 text-sm text-red-400">{submitError}</p>
+          )}
+          {submitOk && (
+            <p className="mt-1 text-sm text-emerald-400">記録しました！</p>
+          )}
+        </div>
+      </form>
+    </div>
+  );
+}
+
diff --git a/app/log/page.tsx b/app/log/page.tsx
index e018d9f..682f754 100644
--- a/app/log/page.tsx
+++ b/app/log/page.tsx
@@ -1,169 +1,9 @@
-"use client";
+// app/log/page.tsx
+import LogForm from "./_LogForm";
 
-import React, { useEffect, useMemo, useState } from "react";
-import { getSupabaseClient } from "@/lib/supabaseClient";
-const supabase = getSupabaseClient();
-import { getCurrentProfileId } from "../_utils/getCurrentProfileId";
+export const dynamic = "force-dynamic";
 
-type Row = {
-  id: number;
-  date: string | null;
-  ymd: string;
-  category: string;
-  amount: number;        // DBには常に正
-  memo: string | null;
-  is_income: boolean;
-};
-
-const CATEGORIES = ["食費", "日用品", "通信", "交通", "娯楽", "その他"];
-
-function toYmd(dateStr: string): string {
-  const d = new Date(dateStr);
-  if (Number.isNaN(d.getTime())) return dateStr;
-  const y = d.getFullYear();
-  const m = String(d.getMonth() + 1).padStart(2, "0");
-  const da = String(d.getDate()).padStart(2, "0");
-  return `${y}-${m}-${da}`;
-}
-function toYYYYMM(dateStr: string): string {
-  const d = new Date(dateStr);
-  const y = d.getFullYear();
-  const m = String(d.getMonth() + 1).padStart(2, "0");
-  return `${y}${m}`;
-}
-
-export default function LogPage() {
-  const [profileId, setProfileId] = useState<string>("");
-  const [date, setDate] = useState<string>(() => {
-    const d = new Date();
-    const y = d.getFullYear();
-    const m = String(d.getMonth() + 1).padStart(2, "0");
-    const da = String(d.getDate()).padStart(2, "0");
-    return `${y}-${m}-${da}`;
-  });
-  const [category, setCategory] = useState<string>("食費");
-  const [amount, setAmount] = useState<string>("0");
-  const [isIncome, setIsIncome] = useState<boolean>(false);
-  const [rows, setRows] = useState<Row[]>([]);
-  const currentYYYYMM = useMemo(() => toYYYYMM(date), [date]);
-
-  useEffect(() => {
-    (async () => {
-      const pid = await getCurrentProfileId();
-      setProfileId(pid);
-    })();
-  }, []);
-
-  const fetchThisMonth = async () => {
-    if (!profileId) return;
-    const start = `${currentYYYYMM.slice(0, 4)}-${currentYYYYMM.slice(4, 6)}-01`;
-    const endBase = new Date(start);
-    endBase.setMonth(endBase.getMonth() + 1);
-    const end = `${endBase.getFullYear()}-${String(endBase.getMonth() + 1).padStart(2, "0")}-01`;
-
-    const { data, error } = await supabase
-      .from("logs")
-      .select("*")
-      .eq("profile_id", profileId)
-      .gte("ymd", start)
-      .lt("ymd", end)
-      .order("ymd", { ascending: false });
-
-    if (error) {
-      alert(`取得に失敗しました: ${error.message}`);
-      console.error(error);
-      return;
-    }
-    setRows((data as Row[]) ?? []);
-  };
-
-  useEffect(() => {
-    fetchThisMonth();
-    // eslint-disable-next-line react-hooks/exhaustive-deps
-  }, [profileId, currentYYYYMM]);
-
-  const onAdd = async () => {
-    if (!profileId) return;
-    const ymd = toYmd(date);
-    const yyyymm = toYYYYMM(date);
-    const amt = Math.abs(Number(amount) || 0);  // 常に正で保存
-
-    const payload = {
-      profile_id: profileId,
-      date: ymd,
-      ymd,      category,
-      amount: Math.abs(Number(amt)),
-      memo: null,
-      is_income: isIncome,
-    };
-
-    const { error } = await supabase.from("logs").insert(payload);
-    if (error) {
-      alert(`保存に失敗しました: ${error.message}`);
-      console.error(error);
-      return;
-    }
-    setAmount("0");
-    await fetchThisMonth();
-  };
-
-  return (
-    <main className="max-w-3xl mx-auto p-6 space-y-6">
-      <h1 className="text-2xl font-bold">収支記録</h1>
-
-      <div className="flex flex-wrap items-center gap-3">
-        <input
-          type="date"
-          value={date}
-          onChange={(e) => setDate(e.target.value)}
-          className="bg-transparent border rounded px-3 py-2"
-        />
-
-        <select
-          value={category}
-          onChange={(e) => setCategory(e.target.value)}
-          className="bg-transparent border rounded px-3 py-2"
-        >
-          {CATEGORIES.map((c) => (
-            <option key={c} value={c}>
-              {c}
-            </option>
-          ))}
-        </select>
-
-        <input
-          type="number"
-          inputMode="numeric"
-          value={amount}
-          onChange={(e) => setAmount(e.target.value)}
-          className="bg-transparent border rounded px-3 py-2 w-28 text-right"
-        />
-
-        <label className="inline-flex items-center gap-2 ml-2">
-          <input
-            type="checkbox"
-            checked={isIncome}
-            onChange={(e) => setIsIncome(e.target.checked)}
-          />
-          収入として記録する
-        </label>
-
-        <button
-          onClick={onAdd}
-          className="bg-green-600 hover:bg-green-700 text-white rounded px-4 py-2"
-        >
-          追加
-        </button>
-      </div>
-
-      <ul className="space-y-2 text-sm">
-        {rows.map((r) => (
-          <li key={r.id}>
-            {r.ymd} [{r.is_income ? "収入" : "支出"}] {r.category}：{Math.abs(r.amount)}円
-          </li>
-        ))}
-      </ul>
-    </main>
-  );
+export default function Page() {
+  return <LogForm />;
 }
 
diff --git a/app/login/page.tsx b/app/login/page.tsx
new file mode 100644
index 0000000..cb9790f
--- /dev/null
+++ b/app/login/page.tsx
@@ -0,0 +1,44 @@
+"use client";
+import { useState } from "react";
+import { createClientComponentClient } from "@supabase/auth-helpers-nextjs";
+
+export default function LoginForm() {
+  const supabase = createClientComponentClient();
+  const [email, setEmail] = useState("");
+  const [password, setPassword] = useState("");
+  const [err, setErr] = useState<string | null>(null);
+
+  async function onSubmit(e: React.FormEvent) {
+    e.preventDefault();
+    setErr(null);
+    const { error } = await supabase.auth.signInWithPassword({ email, password });
+    if (error) {
+      setErr(error.message); // supabase からのエラー文言を表示
+      return;
+    }
+    // 成功 → 任意の遷移
+    window.location.href = "/dashboard";
+  }
+
+  return (
+    <form onSubmit={onSubmit} className="space-y-3 max-w-sm">
+      <input
+        value={email}
+        onChange={(e) => setEmail(e.target.value)}
+        type="email"
+        placeholder="email"
+        className="input"
+      />
+      <input
+        value={password}
+        onChange={(e) => setPassword(e.target.value)}
+        type="password"
+        placeholder="password"
+        className="input"
+      />
+      <button className="btn">メール＋パスワードでログイン</button>
+      {err && <p className="text-red-500 text-sm">{err}</p>}
+    </form>
+  );
+}
+
diff --git a/app/reset-password/page.tsx b/app/reset-password/page.tsx
new file mode 100644
index 0000000..a265d22
--- /dev/null
+++ b/app/reset-password/page.tsx
@@ -0,0 +1,80 @@
+"use client";
+import { useEffect, useState } from "react";
+import { createClientComponentClient } from "@supabase/auth-helpers-nextjs";
+
+export default function ResetPasswordPage() {
+  const supabase = createClientComponentClient();
+  const [pwd, setPwd] = useState("");
+  const [pwd2, setPwd2] = useState("");
+  const [msg, setMsg] = useState<string | null>(null);
+  const [err, setErr] = useState<string | null>(null);
+  const [ready, setReady] = useState(false);
+
+  // メールのリンクで来たら、セッションが作成される（PASSWORD_RECOVERY）。
+  // 念のためセッションがあるかを確認してからフォームを出す。
+  useEffect(() => {
+    let mounted = true;
+    (async () => {
+      const { data } = await supabase.auth.getSession();
+      if (mounted) setReady(!!data.session);
+    })();
+    // イベント経由でセッションが入るケースにも対応
+    const { data: sub } = supabase.auth.onAuthStateChange((_e, _s) => {
+      setReady(true);
+    });
+    return () => {
+      mounted = false;
+      sub.subscription.unsubscribe();
+    };
+  }, [supabase]);
+
+  async function onSubmit(e: React.FormEvent) {
+    e.preventDefault();
+    setMsg(null);
+    setErr(null);
+    if (pwd.length < 8) return setErr("パスワードは8文字以上にしてください。");
+    if (pwd !== pwd2) return setErr("確認用パスワードが一致しません。");
+
+    const { error } = await supabase.auth.updateUser({ password: pwd });
+    if (error) return setErr(error.message);
+
+    setMsg("パスワードを更新しました。ログインページへ移動します。");
+    setTimeout(() => (window.location.href = "/login"), 1200);
+  }
+
+  return (
+    <div className="max-w-sm mx-auto space-y-4">
+      <h1 className="text-xl font-bold">新しいパスワードを設定</h1>
+
+      {!ready ? (
+        <p className="text-sm text-muted">
+          認証リンクを確認しています… このページはメールのリンクから開いてください。
+        </p>
+      ) : (
+        <form onSubmit={onSubmit} className="space-y-3">
+          <input
+            type="password"
+            className="input w-full"
+            placeholder="新しいパスワード（8文字以上）"
+            value={pwd}
+            onChange={(e) => setPwd(e.target.value)}
+            required
+          />
+          <input
+            type="password"
+            className="input w-full"
+            placeholder="新しいパスワード（確認用）"
+            value={pwd2}
+            onChange={(e) => setPwd2(e.target.value)}
+            required
+          />
+          <button className="btn w-full">更新する</button>
+        </form>
+      )}
+
+      {msg && <p className="text-green-500 text-sm">{msg}</p>}
+      {err && <p className="text-red-500 text-sm">{err}</p>}
+    </div>
+  );
+}
+
diff --git a/app/settings/SettingsCategories.tsx b/app/settings/SettingsCategories.tsx
new file mode 100644
index 0000000..be7892c
--- /dev/null
+++ b/app/settings/SettingsCategories.tsx
@@ -0,0 +1,128 @@
+// app/settings/SettingsCategories.tsx
+"use client";
+
+import React, { useEffect, useMemo, useState } from "react";
+
+type Kind = "expense" | "income";
+type Item = { id: string; name: string; kind: Kind };
+
+export default function SettingsCategories() {
+  const [items, setItems] = useState<Item[]>([]);
+  const [kind, setKind] = useState<Kind>("expense");
+  const [name, setName] = useState("");
+  const [err, setErr] = useState<string | null>(null);
+  const [loading, setLoading] = useState(false);
+
+  async function ensureProfile() {
+    await fetch("/api/profile", { cache: "no-store" });
+  }
+
+  async function fetchAll() {
+    setErr(null);
+    const res = await fetch("/api/categories?kind=all", { cache: "no-store" });
+    const json = await res.json();
+    if (!json.ok) {
+      setErr("カテゴリ取得に失敗しました");
+      setItems([]);
+      return;
+    }
+    setItems(json.items as Item[]);
+  }
+
+  useEffect(() => {
+    // 初回：profile を用意してからカテゴリ取得
+    ensureProfile().then(fetchAll);
+  }, []);
+
+  const expense = useMemo(() => items.filter((i) => i.kind === "expense"), [items]);
+  const income  = useMemo(() => items.filter((i) => i.kind === "income"), [items]);
+
+  async function onAdd() {
+    if (!name.trim()) return;
+    setLoading(true);
+    setErr(null);
+    const res = await fetch("/api/categories", {
+      method: "POST",
+      headers: { "Content-Type": "application/json" },
+      body: JSON.stringify({ name: name.trim(), kind }),
+    });
+    const json = await res.json();
+    if (!json.ok) {
+      setErr(json.error ?? "追加に失敗しました");
+    } else {
+      setName("");
+      await fetchAll();
+    }
+    setLoading(false);
+  }
+
+  return (
+    <div className="space-y-4">
+      <div className="flex items-center gap-4">
+        <label className="flex items-center gap-2">
+          <input
+            type="radio"
+            name="kind"
+            checked={kind === "expense"}
+            onChange={() => setKind("expense")}
+          />
+          支出
+        </label>
+        <label className="flex items-center gap-2">
+          <input
+            type="radio"
+            name="kind"
+            checked={kind === "income"}
+            onChange={() => setKind("income")}
+          />
+          収入
+        </label>
+
+        <input
+          className="input w-64"
+          placeholder="例）食費 / 給与 / 交通 など"
+          value={name}
+          onChange={(e) => setName(e.target.value)}
+        />
+        <button className="btn" onClick={onAdd} disabled={loading}>
+          追加
+        </button>
+      </div>
+
+      {err && <p className="text-red-500 text-sm">{err}</p>}
+
+      <div className="grid grid-cols-2 gap-6">
+        <div className="rounded-lg border p-4">
+          <h3 className="font-semibold mb-3">支出カテゴリ</h3>
+          {expense.length === 0 ? (
+            <p className="text-sm text-muted-foreground">まだありません</p>
+          ) : (
+            <ul className="space-y-2">
+              {expense.map((c) => (
+                <li key={c.id} className="rounded bg-muted px-3 py-2 inline-block">{c.name}</li>
+              ))}
+            </ul>
+          )}
+        </div>
+
+        <div className="rounded-lg border p-4">
+          <h3 className="font-semibold mb-3">収入カテゴリ</h3>
+          {income.length === 0 ? (
+            <p className="text-sm text-muted-foreground">まだありません</p>
+          ) : (
+            <ul className="space-y-2">
+              {income.map((c) => (
+                <li key={c.id} className="rounded bg-muted px-3 py-2 inline-block">{c.name}</li>
+              ))}
+            </ul>
+          )}
+        </div>
+      </div>
+
+      <p className="text-xs text-muted-foreground">
+        ここで編集したカテゴリは「記録」「予算」のプルダウンに即時反映されます。
+      </p>
+    </div>
+  );
+}
+
diff --git a/app/settings/_SettingsCategories.tsx b/app/settings/_SettingsCategories.tsx
new file mode 100644
index 0000000..df01460
--- /dev/null
+++ b/app/settings/_SettingsCategories.tsx
@@ -0,0 +1,94 @@
+"use client";
+
+import { useEffect, useState } from "react";
+
+type Kind = "expense" | "income";
+type Category = { id: string; name: string; kind: Kind };
+
+export default function SettingsCategories() {
+  const [expense, setExpense] = useState<Category[]>([]);
+  const [income, setIncome] = useState<Category[]>([]);
+  const [loading, setLoading] = useState(true);
+  const [err, setErr] = useState<string | null>(null);
+
+  // ← ページ表示時に「支出」「収入」を同時に取得（トグルに依存しない）
+  useEffect(() => {
+    let abort = false;
+
+    async function fetchAll() {
+      setLoading(true);
+      setErr(null);
+      try {
+        const qs = (k: string) => `/api/categories?kind=${k}`;
+        const [eRes, iRes] = await Promise.all([fetch(qs("expense")), fetch(qs("income"))]);
+
+        if (!eRes.ok || !iRes.ok) {
+          const eText = !eRes.ok ? await eRes.text() : "";
+          const iText = !iRes.ok ? await iRes.text() : "";
+          throw new Error(`カテゴリ取得に失敗しました\n${eText || ""}\n${iText || ""}`.trim());
+        }
+
+        const eJson = await eRes.json();
+        const iJson = await iRes.json();
+
+        if (abort) return;
+        setExpense(eJson.items ?? []);
+        setIncome(iJson.items ?? []);
+      } catch (e: any) {
+        if (!abort) setErr(e?.message || "カテゴリ取得に失敗しました");
+      } finally {
+        if (!abort) setLoading(false);
+      }
+    }
+
+    fetchAll();
+    return () => {
+      abort = true;
+    };
+  }, []);
+
+  return (
+    <div className="mt-6 grid gap-6 md:grid-cols-2">
+      <div className="rounded-xl border border-white/10 p-4">
+        <h3 className="mb-3 text-lg font-semibold">支出カテゴリ</h3>
+        {loading ? (
+          <p className="text-sm text-white/60">読み込み中…</p>
+        ) : err ? (
+          <p className="text-sm text-red-400 whitespace-pre-wrap">{err}</p>
+        ) : expense.length === 0 ? (
+          <p className="text-sm text-white/60">まだありません</p>
+        ) : (
+          <ul className="space-y-2">
+            {expense.map((c) => (
+              <li key={c.id} className="flex items-center justify-between rounded-lg bg-white/5 px-3 py-2">
+                <span>{c.name}</span>
+                {/* 必要なら削除ボタンをここに */}
+              </li>
+            ))}
+          </ul>
+        )}
+      </div>
+
+      <div className="rounded-xl border border-white/10 p-4">
+        <h3 className="mb-3 text-lg font-semibold">収入カテゴリ</h3>
+        {loading ? (
+          <p className="text-sm text-white/60">読み込み中…</p>
+        ) : err ? (
+          <p className="text-sm text-red-400 whitespace-pre-wrap">{err}</p>
+        ) : income.length === 0 ? (
+          <p className="text-sm text-white/60">まだありません</p>
+        ) : (
+          <ul className="space-y-2">
+            {income.map((c) => (
+              <li key={c.id} className="flex items-center justify-between rounded-lg bg-white/5 px-3 py-2">
+                <span>{c.name}</span>
+                {/* 必要なら削除ボタンをここに */}
+              </li>
+            ))}
+          </ul>
+        )}
+      </div>
+    </div>
+  );
+}
+
diff --git a/app/settings/page.tsx b/app/settings/page.tsx
new file mode 100644
index 0000000..f53318d
--- /dev/null
+++ b/app/settings/page.tsx
@@ -0,0 +1,32 @@
+// app/settings/page.tsx
+export const dynamic = "force-dynamic";
+
+import SettingsCategories from "./_SettingsCategories";
+
+export default function SettingsPage() {
+  return (
+    <div className="space-y-6">
+      <h1 className="text-xl font-bold">設定</h1>
+
+      {/* プロフィール・通知・テーマのプレースホルダー（UIだけ） */}
+      <div className="grid gap-4 md:grid-cols-3">
+        <div className="card">
+          <div className="card-title">プロフィール（予定）</div>
+          <div className="card-body text-sm text-muted">表示名やアカウント情報（予定）</div>
+        </div>
+        <div className="card">
+          <div className="card-title">通知（予定）</div>
+          <div className="card-body text-sm text-muted">リマインダー・メール通知（予定）</div>
+        </div>
+        <div className="card">
+          <div className="card-title">テーマ（予定）</div>
+          <div className="card-body text-sm text-muted">ダーク/ライト、配色（予定）</div>
+        </div>
+      </div>
+
+      {/* カテゴリ管理（実体はクライアント側で /api/profile を叩いて vid を作成/取得） */}
+      <SettingsCategories />
+    </div>
+  );
+}
+
diff --git a/components/AuthBootstrap.tsx b/components/AuthBootstrap.tsx
new file mode 100644
index 0000000..87f8f15
--- /dev/null
+++ b/components/AuthBootstrap.tsx
@@ -0,0 +1,46 @@
+"use client";
+
+import { useEffect, useRef } from "react";
+import { createBrowserClient } from "@supabase/ssr";
+
+/**
+ * 初回アクセスでセッションが無ければ匿名サインイン。
+ * 成功時、profiles に upsert しておく。
+ * 画面には何も描画しません。
+ */
+export default function AuthBootstrap() {
+  const ran = useRef(false);
+
+  useEffect(() => {
+    if (ran.current) return;
+    ran.current = true;
+
+    (async () => {
+      const supabase = createBrowserClient(
+        process.env.NEXT_PUBLIC_SUPABASE_URL!,
+        process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
+      );
+
+      const { data: { session } } = await supabase.auth.getSession();
+      if (!session) {
+        const { data, error } = await supabase.auth.signInAnonymously();
+        if (error) {
+          console.error("Anon sign-in failed:", error.message);
+          return;
+        }
+        const uid = data.user?.id;
+        if (!uid) return;
+
+        // profiles を upsert（存在しなければ作る）
+        const { error: upErr } = await supabase
+          .from("profiles")
+          .upsert({ id: uid }, { onConflict: "id" });
+
+        if (upErr) console.error("Upsert profile failed:", upErr.message);
+      }
+    })();
+  }, []);
+
+  return null;
+}
+
diff --git a/components/Nav.tsx b/components/Nav.tsx
index 3aeb911..015fd6f 100644
--- a/components/Nav.tsx
+++ b/components/Nav.tsx
@@ -1,36 +1,73 @@
-'use client';
+"use client";
+
 import Link from "next/link";
 import { usePathname } from "next/navigation";
+import { useMemo } from "react";
+
+/**
+ * ヘッダー右側のナビゲーション。
+ * - アクティブなリンクを太字＋下線で表示
+ * - スマホでも折り返して使えるシンプルなフレックス
+ * - 右端に「設定 ⚙︎」を明示
+ */
+export default function Nav() {
+  const pathname = usePathname();
+
+  // 左側の主要リンク
+  const links = useMemo(
+    () => [
+      { href: "/dashboard", label: "ダッシュボード" },
+      { href: "/log", label: "記録" },
+      { href: "/budgets", label: "予算" },
+      { href: "/learn", label: "学ぶ" },
+      { href: "/goal", label: "目標" },
+    ],
+    []
+  );
 
-const tabs = [
-  { href: "/dashboard", label: "ダッシュボード" },
-  { href: "/learn",     label: "学ぶ" },
-  { href: "/log",       label: "記録" },
-  { href: "/goal",      label: "目標" },
-  { href: "/budgets",   label: "予算" },
-];
+  // アクティブ判定（完全一致 or 先頭一致のゆるめ判定にしたい場合は startsWith へ）
+  const isActive = (href: string) =>
+    pathname === href || pathname.startsWith(href + "/");
 
-export default function Nav(){
-  const path = usePathname();
   return (
-    <nav className="flex gap-1 flex-wrap">
-      {tabs.map(t=>{
-        const active = path?.startsWith(t.href);
-        return (
-          <Link
-            key={t.href}
-            href={t.href}
-            className={
-              "px-3 py-1.5 rounded-lg text-sm border transition " +
-              (active
-                ? "bg-brand text-black border-brand/40"
-                : "bg-panel border-line hover:bg-panel/80")
-            }
-          >
-            {t.label}
-          </Link>
-        );
-      })}
+    <nav className="w-full">
+      <div className="flex items-center justify-end gap-4 text-sm">
+        {/* 左側リンク群 */}
+        <div className="flex items-center gap-3">
+          {links.map((l) => (
+            <Link
+              key={l.href}
+              href={l.href}
+              className={[
+                "px-2 py-1 rounded-md transition-colors",
+                isActive(l.href)
+                  ? "font-semibold underline underline-offset-4"
+                  : "text-muted hover:text-ink hover:bg-panel/60",
+              ].join(" ")}
+            >
+              {l.label}
+            </Link>
+          ))}
+        </div>
+
+        {/* 仕切り（薄い縦線） */}
+        <span className="h-5 w-px bg-line/70 mx-1" aria-hidden />
+
+        {/* 右端：設定 */}
+        <Link
+          href="/settings"
+          className={[
+            "px-2 py-1 rounded-md transition-colors flex items-center gap-1",
+            isActive("/settings")
+              ? "font-semibold underline underline-offset-4"
+              : "text-muted hover:text-ink hover:bg-panel/60",
+          ].join(" ")}
+          aria-label="設定"
+        >
+          <span className="text-base" aria-hidden>⚙︎</span>
+          <span>設定</span>
+        </Link>
+      </div>
     </nav>
   );
 }
diff --git a/components/charts/CategoryPie.tsx b/components/charts/CategoryPie.tsx
index 7e28d8c..d401c6d 100644
--- a/components/charts/CategoryPie.tsx
+++ b/components/charts/CategoryPie.tsx
@@ -1,68 +1,56 @@
 "use client";
 
-import { useMemo } from "react";
-import { Chart as ChartJS, ArcElement, Tooltip, Legend } from "chart.js";
-import { Pie } from "react-chartjs-2";
-
-ChartJS.register(ArcElement, Tooltip, Legend);
-
-export type LogItem = {
-  id: number;
-  date: string;        // YYYY-MM-DD
-  category: string | null;
-  amount: number | null;
-  is_income?: boolean | null;
-};
-
-export default function CategoryPie({ items }: { items: LogItem[] }) {
-  // 支出だけをカテゴリ合計
-  const { labels, values } = useMemo(() => {
-    const map = new Map<string, number>();
-    for (const it of items) {
-      if (it.is_income) continue; // 収入は除外
-      const amt = Number(it.amount || 0);
-      if (!amt) continue;
-      const key = it.category || "未分類";
-      map.set(key, (map.get(key) ?? 0) + amt);
-    }
-    const labels = Array.from(map.keys());
-    const values = labels.map((k) => map.get(k) ?? 0);
-    return { labels, values };
-  }, [items]);
-
-  if (!labels.length) {
-    return <div className="text-sm text-muted-foreground">データがありません。</div>;
-  }
-
-  const data = {
-    labels,
-    datasets: [
-      {
-        label: "支出",
-        data: values,
-      },
-    ],
-  };
-
-  const options = {
-    responsive: true,
-    maintainAspectRatio: false as const,
-    plugins: {
-      legend: { position: "top" as const },
-      tooltip: {
-        callbacks: {
-          label: (ctx: any) => {
-            const v = Number(ctx.raw ?? 0);
-            return `${ctx.label}: ${v.toLocaleString()}円`;
-          },
-        },
-      },
-    },
-  };
-
+import React, { useEffect, useMemo, useState } from "react";
+import { getSupabaseBrowser } from "@/app/_supabase/client";
+
+type Row = { category: string; total: number };
+
+export default function CategoryPie() {
+  const supabase = useMemo(() => getSupabaseBrowser(), []);
+  const [rows, setRows] = useState<Row[]>([]);
+  const [msg, setMsg] = useState<string | null>(null);
+
+  // vid 準備
+  useEffect(() => {
+    fetch("/api/profile").catch(() => {});
+  }, []);
+
+  useEffect(() => {
+    let aborted = false;
+    (async () => {
+      // 例：支出合計をカテゴリ別に集計するビュー/クエリがある前提
+      const { data, error } = await supabase
+        .rpc("category_expense_totals") // ない場合はあなたの実装に合わせてください
+        .select();
+
+      if (!aborted) {
+        if (error) {
+          setMsg(`集計に失敗：${error.message}`);
+          setRows([]);
+        } else {
+          setMsg(null);
+          setRows((data ?? []) as Row[]);
+        }
+      }
+    })();
+    return () => {
+      aborted = true;
+    };
+  }, [supabase]);
+
+  if (msg) return <p className="text-sm text-muted">{msg}</p>;
+  if (rows.length === 0) return <p className="text-sm text-muted">データがありません。</p>;
+
+  // 実際の円グラフはお好みのライブラリで。ここでは簡易表示に留めます
   return (
-    <div className="h-64 sm:h-80">
-      <Pie data={data} options={options} />
-    </div>
+    <ul className="text-sm space-y-1">
+      {rows.map((r) => (
+        <li key={r.category} className="flex justify-between">
+          <span>{r.category}</span>
+          <span>{r.total.toLocaleString()} 円</span>
+        </li>
+      ))}
+    </ul>
   );
 }
+
diff --git a/middleware.ts b/middleware.ts
new file mode 100644
index 0000000..3575b5a
--- /dev/null
+++ b/middleware.ts
@@ -0,0 +1,32 @@
+import type { NextRequest } from "next/server";
+import { NextResponse } from "next/server";
+import { createMiddlewareClient } from "@supabase/auth-helpers-nextjs";
+
+/**
+ * すべてのリクエストでセッションをサイレント更新。
+ * 静的アセット/Next内部パスはここで除外する（matcherは使わない）。
+ */
+export async function middleware(req: NextRequest) {
+  const { pathname } = req.nextUrl;
+
+  // 静的ファイルやNextの内部パスは早期return
+  if (
+    pathname.startsWith("/_next") ||
+    pathname === "/favicon.ico" ||
+    pathname.startsWith("/api/auth") || // 使っていれば
+    /\.(?:png|jpg|jpeg|svg|gif|webp|ico|txt|xml|json)$/.test(pathname)
+  ) {
+    return NextResponse.next();
+  }
+
+  const res = NextResponse.next();
+  const supabase = createMiddlewareClient({ req, res });
+
+  // 認証済みならここで自動リフレッシュ、未認証は何もしない
+  await supabase.auth.getSession();
+
+  return res;
+}
+
+// ★ matcher は書かない（今回のエラー回避ポイント）
+
diff --git a/package-lock.json b/package-lock.json
index be16665..8db3e76 100644
--- a/package-lock.json
+++ b/package-lock.json
@@ -8,6 +8,9 @@
       "name": "finlit-app",
       "version": "0.1.0",
       "dependencies": {
+        "@dnd-kit/core": "^6.3.1",
+        "@dnd-kit/modifiers": "^9.0.0",
+        "@dnd-kit/sortable": "^10.0.0",
         "@supabase/auth-helpers-nextjs": "^0.10.0",
         "@supabase/ssr": "^0.7.0",
         "chart.js": "^4.5.0",
@@ -45,6 +48,73 @@
         "url": "https://github.com/sponsors/sindresorhus"
       }
     },
+    "node_modules/@dnd-kit/accessibility": {
+      "version": "3.1.1",
+      "resolved": "https://registry.npmjs.org/@dnd-kit/accessibility/-/accessibility-3.1.1.tgz",
+      "integrity": "sha512-2P+YgaXF+gRsIihwwY1gCsQSYnu9Zyj2py8kY5fFvUM1qm2WA2u639R6YNVfU4GWr+ZM5mqEsfHZZLoRONbemw==",
+      "license": "MIT",
+      "dependencies": {
+        "tslib": "^2.0.0"
+      },
+      "peerDependencies": {
+        "react": ">=16.8.0"
+      }
+    },
+    "node_modules/@dnd-kit/core": {
+      "version": "6.3.1",
+      "resolved": "https://registry.npmjs.org/@dnd-kit/core/-/core-6.3.1.tgz",
+      "integrity": "sha512-xkGBRQQab4RLwgXxoqETICr6S5JlogafbhNsidmrkVv2YRs5MLwpjoF2qpiGjQt8S9AoxtIV603s0GIUpY5eYQ==",
+      "license": "MIT",
+      "dependencies": {
+        "@dnd-kit/accessibility": "^3.1.1",
+        "@dnd-kit/utilities": "^3.2.2",
+        "tslib": "^2.0.0"
+      },
+      "peerDependencies": {
+        "react": ">=16.8.0",
+        "react-dom": ">=16.8.0"
+      }
+    },
+    "node_modules/@dnd-kit/modifiers": {
+      "version": "9.0.0",
+      "resolved": "https://registry.npmjs.org/@dnd-kit/modifiers/-/modifiers-9.0.0.tgz",
+      "integrity": "sha512-ybiLc66qRGuZoC20wdSSG6pDXFikui/dCNGthxv4Ndy8ylErY0N3KVxY2bgo7AWwIbxDmXDg3ylAFmnrjcbVvw==",
+      "license": "MIT",
+      "dependencies": {
+        "@dnd-kit/utilities": "^3.2.2",
+        "tslib": "^2.0.0"
+      },
+      "peerDependencies": {
+        "@dnd-kit/core": "^6.3.0",
+        "react": ">=16.8.0"
+      }
+    },
+    "node_modules/@dnd-kit/sortable": {
+      "version": "10.0.0",
+      "resolved": "https://registry.npmjs.org/@dnd-kit/sortable/-/sortable-10.0.0.tgz",
+      "integrity": "sha512-+xqhmIIzvAYMGfBYYnbKuNicfSsk4RksY2XdmJhT+HAC01nix6fHCztU68jooFiMUB01Ky3F0FyOvhG/BZrWkg==",
+      "license": "MIT",
+      "dependencies": {
+        "@dnd-kit/utilities": "^3.2.2",
+        "tslib": "^2.0.0"
+      },
+      "peerDependencies": {
+        "@dnd-kit/core": "^6.3.0",
+        "react": ">=16.8.0"
+      }
+    },
+    "node_modules/@dnd-kit/utilities": {
+      "version": "3.2.2",
+      "resolved": "https://registry.npmjs.org/@dnd-kit/utilities/-/utilities-3.2.2.tgz",
+      "integrity": "sha512-+MKAJEOfaBe5SmV6t34p80MMKhjvUz0vRrvVJbPT0WElzaOJ/1xs+D+KDv+tD/NE5ujfrChEcshd4fLn0wpiqg==",
+      "license": "MIT",
+      "dependencies": {
+        "tslib": "^2.0.0"
+      },
+      "peerDependencies": {
+        "react": ">=16.8.0"
+      }
+    },
     "node_modules/@emnapi/core": {
       "version": "1.5.0",
       "resolved": "https://registry.npmjs.org/@emnapi/core/-/core-1.5.0.tgz",
diff --git a/package.json b/package.json
index c1a2686..39d79b5 100644
--- a/package.json
+++ b/package.json
@@ -12,6 +12,9 @@
     "test:e2e:report": "playwright show-report"
   },
   "dependencies": {
+    "@dnd-kit/core": "^6.3.1",
+    "@dnd-kit/modifiers": "^9.0.0",
+    "@dnd-kit/sortable": "^10.0.0",
     "@supabase/auth-helpers-nextjs": "^0.10.0",
     "@supabase/ssr": "^0.7.0",
     "chart.js": "^4.5.0",
diff --git a/page.tsx b/page.tsx
new file mode 100644
index 0000000..c427e4c
--- /dev/null
+++ b/page.tsx
@@ -0,0 +1,203 @@
+// app/settings/page.tsx
+import { revalidatePath } from "next/cache";
+import { createClient } from "@/app/_supabase/server";
+
+// ---- 共通ヘルパ ------------------------------------------------------------
+async function getProfileId(): Promise<string> {
+  const base = process.env.NEXT_PUBLIC_BASE_URL ?? "http://localhost:3000";
+  const res = await fetch(`${base}/api/profile`, { cache: "no-store" });
+  if (!res.ok) throw new Error("プロフィール取得に失敗しました");
+  const json = (await res.json()) as { vid: string };
+  return json.vid;
+}
+
+type Category = { id: string; name: string; kind: "expense" | "income" };
+
+async function fetchCategories(profileId: string): Promise<{
+  expense: Category[];
+  income: Category[];
+}> {
+  const supabase = createClient();
+  const { data, error } = await supabase
+    .from("categories")
+    .select("id,name,kind")
+    .eq("profile_id", profileId)
+    .order("kind", { ascending: true })
+    .order("name", { ascending: true });
+
+  if (error) throw error;
+  const list = (data ?? []) as Category[];
+  return {
+    expense: list.filter((c) => c.kind === "expense"),
+    income: list.filter((c) => c.kind === "income"),
+  };
+}
+
+// ---- Server Actions ---------------------------------------------------------
+// 全アクションは実行後に /settings /log /budgets を再検証して即時反映します
+async function afterMutate() {
+  revalidatePath("/settings");
+  revalidatePath("/log");
+  revalidatePath("/budgets");
+}
+
+export async function createCategory(formData: FormData) {
+  "use server";
+  const supabase = createClient();
+  const profileId = await getProfileId();
+
+  const name = String(formData.get("name") ?? "").trim();
+  const kind = String(formData.get("kind") ?? "expense") as "expense" | "income";
+
+  if (!name) throw new Error("カテゴリ名を入力してください");
+
+  const { error } = await supabase
+    .from("categories")
+    .insert({ profile_id: profileId, name, kind });
+
+  // 一意制約（重複）に優しく対応
+  if (error && (error as any).code === "23505") {
+    throw new Error("同名のカテゴリがすでに存在します");
+  }
+  if (error) throw error;
+
+  afterMutate();
+}
+
+export async function renameCategory(formData: FormData) {
+  "use server";
+  const supabase = createClient();
+  const profileId = await getProfileId();
+
+  const id = String(formData.get("id") ?? "");
+  const name = String(formData.get("name") ?? "").trim();
+  if (!id || !name) throw new Error("ID または 新しい名前が空です");
+
+  const { error } = await supabase
+    .from("categories")
+    .update({ name })
+    .eq("id", id)
+    .eq("profile_id", profileId);
+
+  if (error && (error as any).code === "23505") {
+    throw new Error("同名のカテゴリがすでに存在します");
+  }
+  if (error) throw error;
+
+  afterMutate();
+}
+
+export async function deleteCategory(formData: FormData) {
+  "use server";
+  const supabase = createClient();
+  const profileId = await getProfileId();
+
+  const id = String(formData.get("id") ?? "");
+  if (!id) throw new Error("ID が空です");
+
+  // もし logs 側で参照中なら DB の外部キー制約でエラーになる想定。
+  // 必要ならここで「このカテゴリを使用しているログは削除/変更してください」と案内メッセージを返すようにしてもOK。
+  const { error } = await supabase.from("categories").delete().eq("id", id).eq("profile_id", profileId);
+  if (error) throw error;
+
+  afterMutate();
+}
+
+// ---- ページ本体 -------------------------------------------------------------
+export const dynamic = "force-dynamic";
+
+export default async function SettingsPage() {
+  const profileId = await getProfileId();
+  const { expense, income } = await fetchCategories(profileId);
+
+  return (
+    <div className="mx-auto max-w-5xl p-6 space-y-10">
+      <h1 className="text-2xl font-semibold">設定</h1>
+
+      {/* 追加フォーム */}
+      <section className="rounded-xl border border-neutral-700/50 p-5 space-y-4">
+        <h2 className="text-lg font-medium">カテゴリを追加</h2>
+        <form action={createCategory} className="grid grid-cols-1 md:grid-cols-3 gap-3">
+          <input
+            name="name"
+            placeholder="例）ジム / サブスク / 副収入"
+            className="rounded-md border border-neutral-700/50 bg-neutral-900 px-3 py-2 outline-none"
+          />
+          <select
+            name="kind"
+            className="rounded-md border border-neutral-700/50 bg-neutral-900 px-3 py-2 outline-none"
+            defaultValue="expense"
+          >
+            <option value="expense">支出カテゴリ</option>
+            <option value="income">収入カテゴリ</option>
+          </select>
+          <button
+            type="submit"
+            className="rounded-md bg-blue-600 px-4 py-2 text-white hover:bg-blue-500 transition"
+          >
+            追加
+          </button>
+        </form>
+        <p className="text-sm text-neutral-400">
+          ※ 同じ種類（支出/収入）で同名のカテゴリは作成できません。
+        </p>
+      </section>
+
+      {/* 一覧＋編集 */}
+      <section className="grid grid-cols-1 md:grid-cols-2 gap-6">
+        <CategoryColumn title="支出カテゴリ" items={expense} />
+        <CategoryColumn title="収入カテゴリ" items={income} />
+      </section>
+    </div>
+  );
+}
+
+// ---- 部分コンポーネント（サーバー） ----------------------------------------
+function CategoryColumn({ title, items }: { title: string; items: Category[] }) {
+  return (
+    <div className="rounded-xl border border-neutral-700/50 p-5">
+      <h3 className="mb-3 text-base font-medium">{title}</h3>
+      <ul className="space-y-3">
+        {items.map((c) => (
+          <li key={c.id} className="flex items-center gap-2">
+            {/* 改名 */}
+            <form action={renameCategory} className="flex flex-1 items-center gap-2">
+              <input type="hidden" name="id" value={c.id} />
+              <input
+                name="name"
+                defaultValue={c.name}
+                className="flex-1 rounded-md border border-neutral-700/50 bg-neutral-900 px-3 py-2 outline-none"
+              />
+              <button
+                type="submit"
+                className="rounded-md bg-neutral-700 px-3 py-2 text-white hover:bg-neutral-600 transition"
+                title="名前を保存"
+              >
+                保存
+              </button>
+            </form>
+
+            {/* 削除 */}
+            <form
+              action={deleteCategory}
+              onSubmit={(e) => {
+                // no-op: server component; confirm は client じゃないと出せないため省略
+              }}
+            >
+              <input type="hidden" name="id" value={c.id} />
+              <button
+                type="submit"
+                className="rounded-md bg-red-600 px-3 py-2 text-white hover:bg-red-500 transition"
+                title="削除"
+              >
+                削除
+              </button>
+            </form>
+          </li>
+        ))}
+        {items.length === 0 && (
+          <li className="text-sm text-neutral-400">まだありません</li>
+        )}
+      </ul>
+    </div>
+  );
diff --git a/src/lib/supabaseClient.ts b/src/lib/supabaseClient.ts
index 6b4a6c1..9c7df43 100644
--- a/src/lib/supabaseClient.ts
+++ b/src/lib/supabaseClient.ts
@@ -1,24 +1,30 @@
-import { createClient, type SupabaseClient } from '@supabase/supabase-js';
+// src/lib/supabaseClient.ts
+// ブラウザ／クライアント用の統一 Supabase クライアント（シングルトン）
 
-const url = process.env.NEXT_PUBLIC_SUPABASE_URL!;
-const anon = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!;
-
-if (!url || !anon) {
-  throw new Error('Missing NEXT_PUBLIC_SUPABASE_URL or NEXT_PUBLIC_SUPABASE_ANON_KEY');
-}
+import { createClient, SupabaseClient } from '@supabase/supabase-js';
 
 declare global {
+  // HMRでもインスタンスを使い回せるように global に保持
   // eslint-disable-next-line no-var
   var __supabase__: SupabaseClient | undefined;
 }
 
+const url = process.env.NEXT_PUBLIC_SUPABASE_URL!;
+const anon = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!;
+
+// 動作チェック用に先頭数文字だけログ出ししたいとき：
+// console.log('[supabase] url =', url, 'anonHead =', anon?.slice(0, 6));
+
+if (!url || !anon) {
+  // 環境変数が埋まっていないケースを早期に検知
+  throw new Error('Supabase env is missing: NEXT_PUBLIC_SUPABASE_URL / NEXT_PUBLIC_SUPABASE_ANON_KEY');
+}
+
 export const supabase: SupabaseClient =
   globalThis.__supabase__ ??
   createClient(url, anon, {
     auth: {
-      persistSession: true,
-      autoRefreshToken: true,
-      detectSessionInUrl: true,
+      persistSession: false, // 今回は匿名キーのみ利用なので cookie セッションは保持しない
     },
   });
 
@@ -26,5 +32,3 @@ if (process.env.NODE_ENV !== 'production') {
   globalThis.__supabase__ = supabase;
 }
 
-export const getSupabaseClient = () => supabase;
-export default supabase;
diff --git a/tsconfig.json b/tsconfig.json
index d8b9323..8f8342e 100644
--- a/tsconfig.json
+++ b/tsconfig.json
@@ -1,7 +1,11 @@
 {
   "compilerOptions": {
-    "target": "ES2017",
-    "lib": ["dom", "dom.iterable", "esnext"],
+    "target": "ES2022",
+    "lib": [
+      "dom",
+      "dom.iterable",
+      "esnext"
+    ],
     "allowJs": true,
     "skipLibCheck": true,
     "strict": true,
@@ -12,16 +16,26 @@
     "resolveJsonModule": true,
     "isolatedModules": true,
     "jsx": "preserve",
+    "baseUrl": ".",
+    "paths": {
+      "@/*": [
+        "./*"
+      ]
+    },
     "incremental": true,
     "plugins": [
       {
         "name": "next"
       }
-    ],
-    "paths": {
-      "@/*": ["./*"]
-    }
+    ]
   },
-  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
-  "exclude": ["node_modules"]
+  "include": [
+    "next-env.d.ts",
+    "**/*.ts",
+    "**/*.tsx",
+    ".next/types/**/*.ts"
+  ],
+  "exclude": [
+    "node_modules"
+  ]
 }
